{"version":3,"file":"angular-tinymce.umd.min.js","sources":["../../src/tinymce.default.ts","../../src/tinymce.events.ts","../../src/tinymce.component.ts","../../src/tinymce.module.ts"],"sourcesContent":["import * as TinyMce from 'tinymce/index';\n/**\n * @return {?}\n */\nexport function tinymceDefaultSettings(): TinyMce.Settings | any {\r\n  return {\r\n    tinymceScriptURL: '/assets/tinymce/tinymce.min.js',\r\n    theme_url: '/assets/tinymce/themes/modern/theme.min.js',\r\n    skin_url: '/assets/tinymce/skins/lightgray'\r\n  };\r\n}\r\n","\nexport class TinyMceEvents {\npublic static Click = 'click';\npublic static DblClick = 'dblClick';\npublic static MouseDown = 'MouseDown';\npublic static MouseUp = 'MouseUp';\npublic static MouseMove = 'MouseMove';\npublic static MouseOver = 'MouseOver';\npublic static MouseOut = 'MouseOut';\npublic static MouseEnter = 'MouseEnter';\npublic static MouseLeave = 'MouseLeave';\npublic static KeyDown = 'KeyDown';\npublic static KeyPress = 'KeyPress';\npublic static KeyUp = 'KeyUp';\npublic static ContextMenu = 'ContextMenu';\npublic static Paste = 'Paste';\npublic static Init = 'Init';\npublic static Focus = 'Focus';\npublic static Blur = 'Blur';\npublic static BeforeSetContent = 'BeforeSetContent';\npublic static SetContent = 'SetContent';\npublic static GetContent = 'GetContent';\npublic static PreProcess = 'PreProcess';\npublic static PostProcess = 'PostProcess';\npublic static NodeChange = 'NodeChange';\npublic static Undo = 'Undo';\npublic static Redo = 'Redo';\npublic static Change = 'Change';\npublic static Dirty = 'Dirty';\npublic static Remove = 'Remove';\npublic static ExecCommand = 'ExecCommand';\npublic static PastePreProcess = 'PastePreProcess';\npublic static PastePostProcess = 'PastePostProcess';\npublic static AddEditor = 'AddEditor';\npublic static RemoveEditor = 'RemoveEditor';\r\n}\n\nfunction TinyMceEvents_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceEvents.Click;\n/** @type {?} */\nTinyMceEvents.DblClick;\n/** @type {?} */\nTinyMceEvents.MouseDown;\n/** @type {?} */\nTinyMceEvents.MouseUp;\n/** @type {?} */\nTinyMceEvents.MouseMove;\n/** @type {?} */\nTinyMceEvents.MouseOver;\n/** @type {?} */\nTinyMceEvents.MouseOut;\n/** @type {?} */\nTinyMceEvents.MouseEnter;\n/** @type {?} */\nTinyMceEvents.MouseLeave;\n/** @type {?} */\nTinyMceEvents.KeyDown;\n/** @type {?} */\nTinyMceEvents.KeyPress;\n/** @type {?} */\nTinyMceEvents.KeyUp;\n/** @type {?} */\nTinyMceEvents.ContextMenu;\n/** @type {?} */\nTinyMceEvents.Paste;\n/** @type {?} */\nTinyMceEvents.Init;\n/** @type {?} */\nTinyMceEvents.Focus;\n/** @type {?} */\nTinyMceEvents.Blur;\n/** @type {?} */\nTinyMceEvents.BeforeSetContent;\n/** @type {?} */\nTinyMceEvents.SetContent;\n/** @type {?} */\nTinyMceEvents.GetContent;\n/** @type {?} */\nTinyMceEvents.PreProcess;\n/** @type {?} */\nTinyMceEvents.PostProcess;\n/** @type {?} */\nTinyMceEvents.NodeChange;\n/** @type {?} */\nTinyMceEvents.Undo;\n/** @type {?} */\nTinyMceEvents.Redo;\n/** @type {?} */\nTinyMceEvents.Change;\n/** @type {?} */\nTinyMceEvents.Dirty;\n/** @type {?} */\nTinyMceEvents.Remove;\n/** @type {?} */\nTinyMceEvents.ExecCommand;\n/** @type {?} */\nTinyMceEvents.PastePreProcess;\n/** @type {?} */\nTinyMceEvents.PastePostProcess;\n/** @type {?} */\nTinyMceEvents.AddEditor;\n/** @type {?} */\nTinyMceEvents.RemoveEditor;\n}\n\r\n","import {\r\n  Component,\r\n  NgZone,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  SimpleChange,\r\n  Inject,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/operator/debounceTime';\r\nimport'rxjs/add/operator/skipWhile';\r\nimport'rxjs/add/operator/take';\r\nimport'rxjs/add/observable/interval';\r\nimport'rxjs/add/observable/fromEvent';\r\n\r\nimport { TinyMceEvents } from './tinymce.events';\r\n\r\nimport * as TinyMce from 'tinymce/index';\r\ndeclare var tinymce: TinyMce.EditorManager;\r\n\r\nexport const /** @type {?} */ TINYMCE_SETTINGS_TOKEN = new InjectionToken('angular-tinymce-settings');\nexport class TinyMceComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\n/**\n * @param {?} obj\n * @return {?}\n */\nwriteValue(obj: any): void {\r\n    const /** @type {?} */ val = obj != null ? obj.toString() : '';\r\n    if (this.editor) {\r\n      this.editor.setContent(val);\r\n    } else {\r\n      this.beforeInitValue = val;\r\n    }\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState?(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n    this.setEditorMode(disabled);\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetEditorMode(disabled: boolean) {\r\n    if (this.editor) {\r\n      if (disabled) {\r\n        this.editor.setMode('readonly');\r\n      } else {\r\n        this.editor.setMode('design');\r\n      }\r\n    }\r\n  }\r\n\r\n  onModelChange: Function = () => { };\r\n  onModelTouched: Function = () => { };\r\n\r\n  beforeInitValue: string;\r\n  disabled: boolean;\r\n\r\n  \r\n  isDisabled: boolean;\r\n\r\n  // Config Properties\r\n   settings: TinyMce.Settings;\r\n   selector: string;\npublic click: EventEmitter<MouseEvent> = new EventEmitter();\npublic dblclick: EventEmitter<MouseEvent> = new EventEmitter();\npublic mousedown: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseup: EventEmitter<MouseEvent> = new EventEmitter();\npublic mousemove: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseover: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseout: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseenter: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseleave: EventEmitter<MouseEvent> = new EventEmitter();\npublic keydown: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic keypress: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic keyup: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic contextmenu: EventEmitter<MouseEvent> = new EventEmitter();\npublic paste: EventEmitter<ClipboardEvent> = new EventEmitter();\npublic init: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic focus: EventEmitter<TinyMce.Events.FocusBlurEvent> = new EventEmitter();\npublic blur: EventEmitter<TinyMce.Events.FocusBlurEvent> = new EventEmitter();\npublic beforesetcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic setcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic getcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic preprocess: EventEmitter<TinyMce.Events.ProcessEvent> = new EventEmitter();\npublic postprocess: EventEmitter<TinyMce.Events.ProcessEvent> = new EventEmitter();\npublic nodechange: EventEmitter<TinyMce.Events.NodeChangeEvent> = new EventEmitter();\npublic undo: EventEmitter<TinyMce.Events.UndoRedoEvent> = new EventEmitter();\npublic redo: EventEmitter<TinyMce.Events.UndoRedoEvent> = new EventEmitter();\npublic change: EventEmitter<TinyMce.Events.ChangeEvent> = new EventEmitter();\npublic dirty: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic remove: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic execcommand: EventEmitter<TinyMce.Events.CommandEvent> = new EventEmitter();\npublic pastepreprocess: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic pastepostprocess: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\r\n\r\n  editor: TinyMce.Editor;\r\n   elem: ElementRef;\n/**\n * @param {?} _settings\n * @param {?} ngZone\n */\nconstructor(\nprivate _settings: any,\nprivate ngZone: NgZone) {\r\n    const localSettings = this.settings || _settings || {};\r\n    this.settings = Object.assign({}, localSettings);\r\n\r\n    if (!(window as any).tinymce && !document.getElementById('tinymceScript')) {\r\n      const tag = document.createElement('script');\r\n      tag.id = 'tinymceScript';\r\n      tag.setAttribute('src', (this.settings as any).tinymceScriptURL || 'assets/tinymce/tinymce.min.js');\r\n      tag.onload = () => {\r\n        tinymce.baseURL = (this.settings as any).baseURL;\r\n      };\r\n      document.body.appendChild(tag);\r\n    }\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if (changes['settings']) {\r\n      this.settings = Object.assign({}, changes['settings'].currentValue);\r\n    }\r\n    if (changes['isDisabled']) {\r\n      this.setDisabledState(changes['isDisabled'].currentValue);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\r\n    this.settings.target = this.elem.nativeElement;\r\n    this.initCallbacks(this.settings);\r\n    Observable\r\n      .interval(300)\r\n      .skipWhile(() => !( /** @type {?} */((window as any))).tinymce)\r\n      .take(1)\r\n      .subscribe(() => {\r\n        tinymce.init(this.settings);\r\n      });\r\n\r\n  }\n/**\n * @param {?} settings\n * @return {?}\n */\ninitCallbacks(settings: TinyMce.Settings): void {\r\n\r\n    const /** @type {?} */ orig = settings.init_instance_callback;\r\n\r\n    settings.init_instance_callback = (editor: TinyMce.Editor) => {\r\n      this.editor = editor;\r\n      this.setEditorMode(this.disabled);\r\n      if (this.beforeInitValue != null) {\r\n        this.editor.setContent(this.beforeInitValue);\r\n      }\r\n      if (orig) {\r\n        orig(editor);\r\n      }\r\n\r\n      editor.on(TinyMceEvents.Click, (e: MouseEvent) => this.click.emit(e));\r\n      editor.on(TinyMceEvents.DblClick, (e: MouseEvent) => this.dblclick.emit(e));\r\n      editor.on(TinyMceEvents.MouseDown, (e: MouseEvent) => this.mousedown.emit(e));\r\n      editor.on(TinyMceEvents.MouseUp, (e: MouseEvent) => this.mouseup.emit(e));\r\n      editor.on(TinyMceEvents.MouseMove, (e: MouseEvent) => this.mousemove.emit(e));\r\n      editor.on(TinyMceEvents.MouseOver, (e: MouseEvent) => this.mouseover.emit(e));\r\n      editor.on(TinyMceEvents.MouseOut, (e: MouseEvent) => this.mouseout.emit(e));\r\n      editor.on(TinyMceEvents.MouseEnter, (e: MouseEvent) => this.mouseenter.emit(e));\r\n      editor.on(TinyMceEvents.MouseLeave, (e: MouseEvent) => this.mouseleave.emit(e));\r\n      editor.on(TinyMceEvents.KeyDown, (e: KeyboardEvent) => this.keydown.emit(e));\r\n      editor.on(TinyMceEvents.KeyPress, (e: KeyboardEvent) => this.keypress.emit(e));\r\n      editor.on(TinyMceEvents.KeyUp, (e: KeyboardEvent) => {\r\n        this.ngZone.run(() => {\r\n          this.onModelChange(this.editor.getContent());\r\n          this.onModelTouched();\r\n        });\r\n        this.keyup.emit(e);\r\n      });\r\n      editor.on(TinyMceEvents.ContextMenu, (e: MouseEvent) => this.contextmenu.emit(e));\r\n      editor.on(TinyMceEvents.Paste, (e: ClipboardEvent) => this.paste.emit(e));\r\n\r\n      editor.on(TinyMceEvents.Focus, (e: TinyMce.Events.FocusBlurEvent) => this.focus.emit(e));\r\n      editor.on(TinyMceEvents.Blur, (e: TinyMce.Events.FocusBlurEvent) => this.blur.emit(e));\r\n      editor.on(TinyMceEvents.BeforeSetContent, (e: TinyMce.Events.ContentEvent) => this.beforesetcontent.emit(e));\r\n      editor.on(TinyMceEvents.SetContent, (e: TinyMce.Events.ContentEvent) => this.setcontent.emit(e));\r\n      editor.on(TinyMceEvents.GetContent, (e: TinyMce.Events.ContentEvent) => this.getcontent.emit(e));\r\n      editor.on(TinyMceEvents.PreProcess, (e: TinyMce.Events.ProcessEvent) => this.preprocess.emit(e));\r\n      editor.on(TinyMceEvents.PostProcess, (e: TinyMce.Events.ProcessEvent) => this.postprocess.emit(e));\r\n      editor.on(TinyMceEvents.NodeChange, (e: TinyMce.Events.NodeChangeEvent) => this.nodechange.emit(e));\r\n      editor.on(TinyMceEvents.Undo, (e: TinyMce.Events.UndoRedoEvent) => this.undo.emit(e));\r\n      editor.on(TinyMceEvents.Redo, (e: TinyMce.Events.UndoRedoEvent) => this.redo.emit(e));\r\n      editor.on(TinyMceEvents.Change, (e: TinyMce.Events.ChangeEvent) => this.change.emit(e));\r\n      editor.on(TinyMceEvents.Dirty, (e: TinyMce.Events.Event) => this.dirty.emit(e));\r\n      editor.on(TinyMceEvents.Remove, (e: TinyMce.Events.Event) => this.remove.emit(e));\r\n      editor.on(TinyMceEvents.ExecCommand, (e: TinyMce.Events.CommandEvent) => {\r\n        this.ngZone.run(() => {\r\n          const /** @type {?} */ content = this.editor.getContent();\r\n          if (content != null && content.length > 0) {\r\n            this.onModelChange(content);\r\n            this.onModelTouched();\r\n          }\r\n        });\r\n        this.execcommand.emit(e);\r\n      });\r\n      editor.on(TinyMceEvents.PastePreProcess, (e: TinyMce.Events.ContentEvent) => this.pastepreprocess.emit(e));\r\n      editor.on(TinyMceEvents.PastePostProcess, (e: TinyMce.Events.ContentEvent) => this.pastepostprocess.emit(e));\r\n    };\r\n\r\n    settings.setup = (editor: TinyMce.Editor) => {\r\n      editor.on(TinyMceEvents.Init, (e: TinyMce.Events.Event) => this.init.emit(e));\r\n    };\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    if (this.editor) {\r\n      ( /** @type {?} */((tinymce as any))).remove(this.editor);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'angular-tinymce',\r\n  template: `<textarea #tinymce ></textarea>`,\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TinyMceComponent),\r\n    multi: true\r\n  }]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [TINYMCE_SETTINGS_TOKEN, ] }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isDisabled': [{ type: Input },],\n'settings': [{ type: Input },],\n'selector': [{ type: Input },],\n'click': [{ type: Output },],\n'dblclick': [{ type: Output },],\n'mousedown': [{ type: Output },],\n'mouseup': [{ type: Output },],\n'mousemove': [{ type: Output },],\n'mouseover': [{ type: Output },],\n'mouseout': [{ type: Output },],\n'mouseenter': [{ type: Output },],\n'mouseleave': [{ type: Output },],\n'keydown': [{ type: Output },],\n'keypress': [{ type: Output },],\n'keyup': [{ type: Output },],\n'contextmenu': [{ type: Output },],\n'paste': [{ type: Output },],\n'init': [{ type: Output },],\n'focus': [{ type: Output },],\n'blur': [{ type: Output },],\n'beforesetcontent': [{ type: Output },],\n'setcontent': [{ type: Output },],\n'getcontent': [{ type: Output },],\n'preprocess': [{ type: Output },],\n'postprocess': [{ type: Output },],\n'nodechange': [{ type: Output },],\n'undo': [{ type: Output },],\n'redo': [{ type: Output },],\n'change': [{ type: Output },],\n'dirty': [{ type: Output },],\n'remove': [{ type: Output },],\n'execcommand': [{ type: Output },],\n'pastepreprocess': [{ type: Output },],\n'pastepostprocess': [{ type: Output },],\n'elem': [{ type: ViewChild, args: ['tinymce', ] },],\n};\n}\n\nfunction TinyMceComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTinyMceComponent.ctorParameters;\n/** @type {?} */\nTinyMceComponent.propDecorators;\n/** @type {?} */\nTinyMceComponent.prototype.onModelChange;\n/** @type {?} */\nTinyMceComponent.prototype.onModelTouched;\n/** @type {?} */\nTinyMceComponent.prototype.beforeInitValue;\n/** @type {?} */\nTinyMceComponent.prototype.disabled;\n/** @type {?} */\nTinyMceComponent.prototype.isDisabled;\n/** @type {?} */\nTinyMceComponent.prototype.settings;\n/** @type {?} */\nTinyMceComponent.prototype.selector;\n/** @type {?} */\nTinyMceComponent.prototype.click;\n/** @type {?} */\nTinyMceComponent.prototype.dblclick;\n/** @type {?} */\nTinyMceComponent.prototype.mousedown;\n/** @type {?} */\nTinyMceComponent.prototype.mouseup;\n/** @type {?} */\nTinyMceComponent.prototype.mousemove;\n/** @type {?} */\nTinyMceComponent.prototype.mouseover;\n/** @type {?} */\nTinyMceComponent.prototype.mouseout;\n/** @type {?} */\nTinyMceComponent.prototype.mouseenter;\n/** @type {?} */\nTinyMceComponent.prototype.mouseleave;\n/** @type {?} */\nTinyMceComponent.prototype.keydown;\n/** @type {?} */\nTinyMceComponent.prototype.keypress;\n/** @type {?} */\nTinyMceComponent.prototype.keyup;\n/** @type {?} */\nTinyMceComponent.prototype.contextmenu;\n/** @type {?} */\nTinyMceComponent.prototype.paste;\n/** @type {?} */\nTinyMceComponent.prototype.init;\n/** @type {?} */\nTinyMceComponent.prototype.focus;\n/** @type {?} */\nTinyMceComponent.prototype.blur;\n/** @type {?} */\nTinyMceComponent.prototype.beforesetcontent;\n/** @type {?} */\nTinyMceComponent.prototype.setcontent;\n/** @type {?} */\nTinyMceComponent.prototype.getcontent;\n/** @type {?} */\nTinyMceComponent.prototype.preprocess;\n/** @type {?} */\nTinyMceComponent.prototype.postprocess;\n/** @type {?} */\nTinyMceComponent.prototype.nodechange;\n/** @type {?} */\nTinyMceComponent.prototype.undo;\n/** @type {?} */\nTinyMceComponent.prototype.redo;\n/** @type {?} */\nTinyMceComponent.prototype.change;\n/** @type {?} */\nTinyMceComponent.prototype.dirty;\n/** @type {?} */\nTinyMceComponent.prototype.remove;\n/** @type {?} */\nTinyMceComponent.prototype.execcommand;\n/** @type {?} */\nTinyMceComponent.prototype.pastepreprocess;\n/** @type {?} */\nTinyMceComponent.prototype.pastepostprocess;\n/** @type {?} */\nTinyMceComponent.prototype.editor;\n/** @type {?} */\nTinyMceComponent.prototype.elem;\n/** @type {?} */\nTinyMceComponent.prototype._settings;\n/** @type {?} */\nTinyMceComponent.prototype.ngZone;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport * as TinyMce from 'tinymce/index';\r\n\r\nimport { TinyMceComponent, TINYMCE_SETTINGS_TOKEN } from './tinymce.component';\n/**\n * Modul für ein TinyMce Input\n */\nexport class TinyMceModule {\n/**\n * @param {?} settings\n * @return {?}\n */\nstatic forRoot(settings: TinyMce.Settings): ModuleWithProviders {\r\n  return {\r\n    ngModule: TinyMceModule,\r\n    providers: [\r\n      { provide: TINYMCE_SETTINGS_TOKEN, useValue: settings }\r\n    ]\r\n  };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule],\r\n  declarations: [TinyMceComponent],\r\n  exports: [TinyMceComponent]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TinyMceModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTinyMceModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tinymceDefaultSettings","tinymceScriptURL","theme_url","skin_url","TinyMceEvents","Click","DblClick","MouseDown","MouseUp","MouseMove","MouseOver","MouseOut","MouseEnter","MouseLeave","KeyDown","KeyPress","KeyUp","ContextMenu","Paste","Init","Focus","Blur","BeforeSetContent","SetContent","GetContent","PreProcess","PostProcess","NodeChange","Undo","Redo","Change","Dirty","Remove","ExecCommand","PastePreProcess","PastePostProcess","AddEditor","RemoveEditor","TINYMCE_SETTINGS_TOKEN","InjectionToken","TinyMceComponent","_settings","ngZone","_this","this","onModelChange","onModelTouched","click","EventEmitter","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","keydown","keypress","keyup","contextmenu","paste","init","focus","blur","beforesetcontent","setcontent","getcontent","preprocess","postprocess","nodechange","undo","redo","change","dirty","remove","execcommand","pastepreprocess","pastepostprocess","localSettings","settings","Object","assign","window","tinymce","document","getElementById","tag","createElement","id","setAttribute","onload","baseURL","body","appendChild","prototype","writeValue","obj","val","toString","editor","setContent","beforeInitValue","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","setEditorMode","setMode","ngOnChanges","changes","currentValue","ngAfterViewInit","target","elem","nativeElement","initCallbacks","Observable","interval","skipWhile","take","subscribe","orig","init_instance_callback","on","e","emit","run","getContent","content","length","setup","ngOnDestroy","decorators","type","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ctorParameters","undefined","Inject","NgZone","propDecorators","isDisabled","Input","Output","ViewChild","TinyMceModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}