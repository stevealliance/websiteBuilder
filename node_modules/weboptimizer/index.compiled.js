#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _child_process = require('child_process');

var _clientnode = require('clientnode');

var _clientnode2 = _interopRequireDefault(_clientnode);

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _configurator = require('./configurator.compiled');

var _configurator2 = _interopRequireDefault(_configurator);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// endregion
// NOTE: Specifies number of allowed threads to spawn.
// IgnoreTypeCheck
process.env.UV_THREADPOOL_SIZE = 128;
const main = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* () {
        try {
            // region controller
            const childProcessOptions = {
                cwd: _configurator2.default.path.context,
                env: process.env,
                shell: true,
                stdio: 'inherit'
            };
            const childProcesses = [];
            const processPromises = [];
            const possibleArguments = ['build', 'build:dll', 'clear', 'document', 'lint', 'preinstall', 'serve', 'test', 'test:browser', 'check:type'];
            const closeEventHandlers = [];
            if (_configurator2.default.givenCommandLineArguments.length > 2) {
                // region temporary save dynamically given configurations
                let dynamicConfiguration = { givenCommandLineArguments: _configurator2.default.givenCommandLineArguments.slice() };
                if (_configurator2.default.givenCommandLineArguments.length > 3 && _clientnode2.default.stringParseEncodedObject(_configurator2.default.givenCommandLineArguments[_configurator2.default.givenCommandLineArguments.length - 1], _configurator2.default, 'configuration')) _configurator2.default.givenCommandLineArguments.pop();
                let count = 0;
                let filePath = _path2.default.resolve(_configurator2.default.path.context, `.dynamicConfiguration-${count}.json`);
                while (true) {
                    filePath = _path2.default.resolve(_configurator2.default.path.context, `.dynamicConfiguration-${count}.json`);
                    if (!(yield _clientnode2.default.isFile(filePath))) break;
                    count += 1;
                }
                yield new _promise2.default(function (resolve, reject) {
                    return fileSystem.writeFile(filePath, (0, _stringify2.default)(dynamicConfiguration), function (error) {
                        return error ? reject(error) : resolve();
                    });
                });
                const additionalArguments = process.argv.splice(3);
                // / region register exit handler to tidy up
                closeEventHandlers.push(function (error) {
                    // NOTE: Close handler have to be synchronous.
                    if (_clientnode2.default.isFileSync(filePath)) fileSystem.unlinkSync(filePath);
                    if (error) throw error;
                });
                // / endregion
                // endregion
                // region handle clear
                /*
                    NOTE: Some tasks could depend on previously created dll
                    packages so a clean should not be performed in that case.
                    NOTE: If we have a dependency cycle we need to preserve files
                    during preinstall phase.
                */
                if (!['build', 'preinstall', 'serve', 'test', 'test:browser'].includes(_configurator2.default.givenCommandLineArguments[2]) && possibleArguments.includes(_configurator2.default.givenCommandLineArguments[2])) {
                    if (_path2.default.resolve(_configurator2.default.path.target.base) === _path2.default.resolve(_configurator2.default.path.context)) {
                        // Removes all compiled files.
                        yield _clientnode2.default.walkDirectoryRecursively(_configurator2.default.path.target.base, (() => {
                            var _ref2 = (0, _asyncToGenerator3.default)(function* (file) {
                                if (_helper2.default.isFilePathInLocation(file.path, _configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames, _configurator2.default.loader.directoryNames).map(function (filePath) {
                                    return _path2.default.resolve(_configurator2.default.path.context, filePath);
                                }).filter(function (filePath) {
                                    return !_configurator2.default.path.context.startsWith(filePath);
                                }))) return false;
                                for (const type in _configurator2.default.build.types) if (new RegExp(_configurator2.default.build.types[type].filePathPattern).test(file.path)) {
                                    if (file.stat.isDirectory()) {
                                        yield new _promise2.default(function (resolve, reject) {
                                            return (0, _rimraf2.default)(file.path, { glob: false }, function (error) {
                                                return error ? reject(error) : resolve();
                                            });
                                        });
                                        return false;
                                    }
                                    yield new _promise2.default(function (resolve, reject) {
                                        return fileSystem.unlink(file.path, function (error) {
                                            return error ? reject(error) : resolve();
                                        });
                                    });
                                    break;
                                }
                            });

                            return function (_x) {
                                return _ref2.apply(this, arguments);
                            };
                        })());
                        for (const file of yield _clientnode2.default.walkDirectoryRecursively(_configurator2.default.path.target.base, function () {
                            return false;
                        }, _configurator2.default.encoding)) if (file.name.length > '.dll-manifest.json'.length && file.name.endsWith('.dll-manifest.json') || file.name.startsWith('npm-debug')) yield new _promise2.default(function (resolve, reject) {
                            return fileSystem.unlink(file.path, function (error) {
                                return error ? reject(error) : resolve();
                            });
                        });
                    } else yield new _promise2.default(function (resolve, reject) {
                        return (0, _rimraf2.default)(_configurator2.default.path.target.base, { glob: false }, function (error) {
                            return error ? reject(error) : resolve();
                        });
                    });
                    if (yield _clientnode2.default.isDirectory(_configurator2.default.path.apiDocumentation)) yield new _promise2.default(function (resolve, reject) {
                        return (0, _rimraf2.default)(_configurator2.default.path.apiDocumentation, { glob: false }, function (error) {
                            return error ? reject(error) : resolve();
                        });
                    });
                }
                // endregion
                // region handle build
                const buildConfigurations = _helper2.default.resolveBuildConfigurationFilePaths(_configurator2.default.build.types, _configurator2.default.path.source.asset.base, _configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames, _configurator2.default.loader.directoryNames).map(function (filePath) {
                    return _path2.default.resolve(_configurator2.default.path.context, filePath);
                }).filter(function (filePath) {
                    return !_configurator2.default.path.context.startsWith(filePath);
                }), _configurator2.default.package.main.fileNames);
                if (['build', 'build:dll', 'document', 'test'].includes(process.argv[2])) {
                    let tidiedUp = false;
                    const tidyUp = function () {
                        /*
                            Determines all none javaScript entities which have been
                            emitted as single module to remove.
                        */
                        if (tidiedUp) return;
                        tidiedUp = true;
                        for (const chunkName in _configurator2.default.injection.internal.normalized) if (_configurator2.default.injection.internal.normalized.hasOwnProperty(chunkName)) for (const moduleID of _configurator2.default.injection.internal.normalized[chunkName]) {
                            const filePath = _helper2.default.determineModuleFilePath(moduleID, _configurator2.default.module.aliases, _configurator2.default.module.replacements.normal, _configurator2.default.extensions, _configurator2.default.path.context, _configurator2.default.path.source.asset.base, _configurator2.default.path.ignore, _configurator2.default.module.directoryNames, _configurator2.default.package.main.fileNames, _configurator2.default.package.main.propertyNames, _configurator2.default.package.aliasPropertyNames, _configurator2.default.encoding);
                            let type;
                            if (filePath) type = _helper2.default.determineAssetType(filePath, _configurator2.default.build.types, _configurator2.default.path);
                            if (typeof type === 'string' && _configurator2.default.build.types[type]) {
                                const filePath = _helper2.default.renderFilePathTemplate(_helper2.default.stripLoader(_configurator2.default.files.compose.javaScript), { '[name]': chunkName });
                                /*
                                    NOTE: Close handler have to be
                                    synchronous.
                                */
                                if (_configurator2.default.build.types[type].outputExtension === 'js' && _clientnode2.default.isFileSync(filePath)) fileSystem.chmodSync(filePath, '755');
                            }
                        }
                        for (const filePath of _configurator2.default.path.tidyUp) if (filePath && _clientnode2.default.isFileSync(filePath))
                            // NOTE: Close handler have to be synchronous.
                            fileSystem.unlinkSync(filePath);
                    };
                    closeEventHandlers.push(tidyUp);
                    /*
                        Triggers complete asset compiling and bundles them into the
                        final productive output.
                    */
                    processPromises.push(new _promise2.default(function (resolve, reject) {
                        const commandLineArguments = (_configurator2.default.commandLine.build.arguments || []).concat(additionalArguments);
                        console.info('Running "' + (`${_configurator2.default.commandLine.build.command} ` + commandLineArguments.join(' ')).trim() + '"');
                        const childProcess = (0, _child_process.spawn)(_configurator2.default.commandLine.build.command, commandLineArguments, childProcessOptions);
                        const copyAdditionalFilesAndTidyUp = function (...parameter) {
                            for (const filePath of _configurator2.default.files.additionalPaths) {
                                const sourcePath = _path2.default.join(_configurator2.default.path.source.base, filePath);
                                const targetPath = _path2.default.join(_configurator2.default.path.target.base, filePath);
                                // NOTE: Close handler have to be synchronous.
                                if (_clientnode2.default.isDirectorySync(sourcePath)) {
                                    if (_clientnode2.default.isDirectorySync(targetPath)) _rimraf2.default.sync(targetPath, { glob: false });
                                    _clientnode2.default.copyDirectoryRecursiveSync(sourcePath, targetPath);
                                } else if (_clientnode2.default.isFileSync(sourcePath)) _clientnode2.default.copyFileSync(sourcePath, targetPath);
                            }
                            tidyUp(...parameter);
                        };
                        const closeHandler = _clientnode2.default.getProcessCloseHandler(resolve, reject, null, process.argv[2] === 'build' ? copyAdditionalFilesAndTidyUp : tidyUp);
                        for (const closeEventName of _clientnode2.default.closeEventNames) childProcess.on(closeEventName, closeHandler);
                        childProcesses.push(childProcess);
                    }));
                    // endregion
                    // region handle preinstall
                } else if (_configurator2.default.library && _configurator2.default.givenCommandLineArguments[2] === 'preinstall') {
                    // Perform all file specific preprocessing stuff.
                    const testModuleFilePaths = _helper2.default.determineModuleLocations(_configurator2.default['test:browser'].injection.internal, _configurator2.default.module.aliases, _configurator2.default.module.replacements.normal, _configurator2.default.extensions, _configurator2.default.path.context, _configurator2.default.path.source.asset.base, _configurator2.default.path.ignore).filePaths;
                    for (const buildConfiguration of buildConfigurations) for (const filePath of buildConfiguration.filePaths) if (!testModuleFilePaths.includes(filePath)) {
                        const evaluationFunction = function (global, self, buildConfiguration, path, additionalArguments, filePath
                        // IgnoreTypeCheck
                        ) {
                            return new Function('global', 'self', 'buildConfiguration', 'path', 'additionalArguments', 'filePath', 'return `' + buildConfiguration[_configurator2.default.givenCommandLineArguments[2]].trim() + '`')(global, self, buildConfiguration, path, additionalArguments, filePath);
                        };
                        const command = evaluationFunction(global, _configurator2.default, buildConfiguration, _path2.default, additionalArguments, filePath);
                        console.info(`Running "${command}"`);
                        processPromises.push(new _promise2.default(function (resolve, reject) {
                            return _clientnode2.default.handleChildProcess((0, _child_process.exec)(command, childProcessOptions, function (error) {
                                return error ? reject(error) : resolve();
                            }));
                        }));
                    }
                }
                // endregion
                // region handle remaining tasks
                const handleTask = function (type) {
                    let tasks;
                    if (Array.isArray(_configurator2.default.commandLine[type])) tasks = _configurator2.default.commandLine[type];else tasks = [_configurator2.default.commandLine[type]];
                    for (const task of tasks) {
                        const evaluationFunction = function (global, self, path
                        // IgnoreTypeCheck
                        ) {
                            return new Function('global', 'self', 'path', 'return ' + (task.hasOwnProperty('indicator') ? task.indicator : 'true'))(global, self, path);
                        };
                        if (evaluationFunction(global, _configurator2.default, _path2.default)) processPromises.push(new _promise2.default(function (resolve, reject) {
                            const commandLineArguments = (task.arguments || []).concat(additionalArguments);
                            console.info('Running "' + (`${task.command} ` + commandLineArguments.join(' ')).trim() + '"');
                            const childProcess = (0, _child_process.spawn)(task.command, commandLineArguments, childProcessOptions);
                            const closeHandler = _clientnode2.default.getProcessCloseHandler(resolve, reject);
                            for (const closeEventName of _clientnode2.default.closeEventNames) childProcess.on(closeEventName, closeHandler);
                            childProcesses.push(childProcess);
                        }));
                    }
                };
                // / region a-/synchronous
                if (['document', 'test'].includes(_configurator2.default.givenCommandLineArguments[2])) {
                    yield _promise2.default.all(processPromises);
                    handleTask(_configurator2.default.givenCommandLineArguments[2]);
                } else if (['lint', 'test:browser', 'check:type', 'serve'].includes(_configurator2.default.givenCommandLineArguments[2])) handleTask(_configurator2.default.givenCommandLineArguments[2]);
                // / endregion
                // endregion
            }
            let finished = false;
            const closeHandler = function (...parameter) {
                if (!finished) for (const closeEventHandler of closeEventHandlers) closeEventHandler(...parameter);
                finished = true;
            };
            for (const closeEventName of _clientnode2.default.closeEventNames) process.on(closeEventName, closeHandler);
            if (require.main === module && (_configurator2.default.givenCommandLineArguments.length < 3 || !possibleArguments.includes(_configurator2.default.givenCommandLineArguments[2]))) console.info(`Give one of "${possibleArguments.join('", "')}" as command ` + 'line argument. You can provide a json string as second ' + 'parameter to dynamically overwrite some configurations.\n');
            // endregion
            // region forward nested return codes
            try {
                yield _promise2.default.all(processPromises);
            } catch (error) {
                process.exit(error.returnCode);
            }
            // endregion
        } catch (error) {
            if (_configurator2.default.debug) throw error;else console.error(error);
        }
    });

    return function main() {
        return _ref.apply(this, arguments);
    };
})();
if (require.main === module) main().catch(error => {
    throw error;
});
exports.default = main;
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;charset=utf-8;base64,