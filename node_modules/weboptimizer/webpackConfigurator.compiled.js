#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _babiliWebpackPlugin = require('babili-webpack-plugin');

var _babiliWebpackPlugin2 = _interopRequireDefault(_babiliWebpackPlugin);

var _clientnode = require('clientnode');

var _clientnode2 = _interopRequireDefault(_clientnode);

var _jsdom = require('jsdom');

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _postcssCssnext = require('postcss-cssnext');

var _postcssCssnext2 = _interopRequireDefault(_postcssCssnext);

var _postcssFontpath = require('postcss-fontpath');

var _postcssFontpath2 = _interopRequireDefault(_postcssFontpath);

var _postcssImport = require('postcss-import');

var _postcssImport2 = _interopRequireDefault(_postcssImport);

var _postcssSprites = require('postcss-sprites');

var _postcssSprites2 = _interopRequireDefault(_postcssSprites);

var _postcssUrl = require('postcss-url');

var _postcssUrl2 = _interopRequireDefault(_postcssUrl);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackSources = require('webpack-sources');

var _ejsLoader = require('./ejsLoader.compiled');

var _ejsLoader2 = _interopRequireDefault(_ejsLoader);

var _configurator = require('./configurator.compiled');

var _configurator2 = _interopRequireDefault(_configurator);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

var _htmlLoader = require('html-loader');

var _htmlLoader2 = _interopRequireDefault(_htmlLoader);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Only needed for debugging this file.

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
try {
    require('source-map-support/register');
} catch (error) {}

const plugins = require('webpack-load-plugins')();


plugins.HTML = plugins.html;
plugins.ExtractText = plugins.extractText;
plugins.AddAssetHTMLPlugin = require('add-asset-html-webpack-plugin');
plugins.OpenBrowser = plugins.openBrowser;
plugins.Favicon = require('favicons-webpack-plugin');
plugins.Imagemin = require('imagemin-webpack-plugin').default;
plugins.Offline = require('offline-plugin');

// / region monkey patches
// Monkey-Patch html loader to retrieve html loader options since the
// "webpack-html-plugin" doesn't preserve the original loader interface.

require.cache[require.resolve('html-loader')].exports = function (...parameter) {
    _clientnode2.default.extendObject(true, this.options, module, this.options);
    return _htmlLoader2.default.call(this, ...parameter);
};
// Monkey-Patch loader-utils to define which url is a local request.

const loaderUtilsIsUrlRequestBackup = _loaderUtils2.default.isUrlRequest;
require.cache[require.resolve('loader-utils')].exports.isUrlRequest = (url, ...additionalParameter) => {
    if (url.match(/^[a-z]+:.+/)) return false;
    return loaderUtilsIsUrlRequestBackup.apply(_loaderUtils2.default, [url].concat(additionalParameter));
};
// / endregion
// endregion
// region initialisation
// / region determine library name
let libraryName;
if ('libraryName' in _configurator2.default && _configurator2.default.libraryName) libraryName = _configurator2.default.libraryName;else if ((0, _keys2.default)(_configurator2.default.injection.internal.normalized).length > 1) libraryName = '[name]';else {
    libraryName = _configurator2.default.name;
    if (_configurator2.default.exportFormat.self === 'var') libraryName = _clientnode2.default.stringConvertToValidVariableName(libraryName);
}
// / endregion
// / region plugins
const pluginInstances = [new _webpack2.default.NoEmitOnErrorsPlugin(), new _webpack2.default.optimize.OccurrenceOrderPlugin(true)];
if (_configurator2.default.debug) pluginInstances.push(new _webpack2.default.NamedModulesPlugin());
// // region define modules to ignore
for (const ignorePattern of _configurator2.default.injection.ignorePattern) pluginInstances.push(new _webpack2.default.IgnorePlugin(new RegExp(ignorePattern)));
// // endregion
// // region define modules to replace
for (const source in _configurator2.default.module.replacements.normal) if (_configurator2.default.module.replacements.normal.hasOwnProperty(source)) pluginInstances.push(new _webpack2.default.NormalModuleReplacementPlugin(new RegExp(source), _configurator2.default.module.replacements.normal[source]));
// // endregion
// // region generate html file
let htmlAvailable = false;
if (_configurator2.default.givenCommandLineArguments[2] !== 'build:dll') for (let htmlConfiguration of _configurator2.default.files.html) if (_clientnode2.default.isFileSync(htmlConfiguration.template.filePath)) {
    pluginInstances.push(new plugins.HTML(_clientnode2.default.extendObject({}, htmlConfiguration, {
        template: htmlConfiguration.template.request })));
    htmlAvailable = true;
}
// // endregion
// // region generate favicons
if (htmlAvailable && _configurator2.default.favicon && _clientnode2.default.isFileSync(_configurator2.default.favicon.logo)) pluginInstances.push(new plugins.Favicon(_configurator2.default.favicon));
// // endregion
// // region provide offline functionality
if (htmlAvailable && _configurator2.default.offline) {
    if (!['serve', 'test:browser'].includes(_configurator2.default.givenCommandLineArguments[2])) for (const type of [['cascadingStyleSheet', 'css'], ['javaScript', 'js']]) if (_configurator2.default.inPlace[type[0]]) {
        const matches = (0, _keys2.default)(_configurator2.default.inPlace[type[0]]);
        for (const name of matches) _configurator2.default.offline.excludes.push(_path2.default.relative(_configurator2.default.path.target.base, _configurator2.default.path.target.asset[type[0]]) + `${name}.${type[1]}?${_configurator2.default.hashAlgorithm}=*`);
    }
    pluginInstances.push(new plugins.Offline(_configurator2.default.offline));
}
// // endregion
// // region opens browser automatically
if (_configurator2.default.development.openBrowser && htmlAvailable && ['serve', 'test:browser'].includes(_configurator2.default.givenCommandLineArguments[2])) pluginInstances.push(new plugins.OpenBrowser(_configurator2.default.development.openBrowser));
// // endregion
// // region provide build environment
if (_configurator2.default.build.definitions) pluginInstances.push(new _webpack2.default.DefinePlugin(_configurator2.default.build.definitions));
if (_configurator2.default.module.provide) pluginInstances.push(new _webpack2.default.ProvidePlugin(_configurator2.default.module.provide));
// // endregion
// // region modules/assets
// /// region perform javaScript minification/optimisation
if (_configurator2.default.module.optimizer.babelMinify) pluginInstances.push(new _babiliWebpackPlugin2.default(_configurator2.default.module.optimizer.babelMinify));
// /// endregion
// /// region apply module pattern
pluginInstances.push({ apply: compiler => {
        compiler.plugin('emit', (compilation, callback) => {
            for (const request in compilation.assets) if (compilation.assets.hasOwnProperty(request)) {
                const filePath = request.replace(/\?[^?]+$/, '');
                const type = _helper2.default.determineAssetType(filePath, _configurator2.default.build.types, _configurator2.default.path);
                if (type && _configurator2.default.assetPattern[type] && !new RegExp(_configurator2.default.assetPattern[type].excludeFilePathRegularExpression).test(filePath)) {
                    const source = compilation.assets[request].source();
                    if (typeof source === 'string') compilation.assets[request] = new _webpackSources.RawSource(_configurator2.default.assetPattern[type].pattern.replace(/\{1\}/g, source.replace(/\$/g, '$$$')));
                }
            }
            callback();
        });
    } });
// /// endregion
// /// region in-place configured assets in the main html file
if (htmlAvailable && !['serve', 'test:browser'].includes(_configurator2.default.givenCommandLineArguments[2])) pluginInstances.push({ apply: compiler => {
        const filePathsToRemove = [];
        compiler.plugin('compilation', compilation => compilation.plugin('html-webpack-plugin-after-html-processing', (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (htmlPluginData, callback) {
                if (_configurator2.default.inPlace.cascadingStyleSheet && (0, _keys2.default)(_configurator2.default.inPlace.cascadingStyleSheet).length || _configurator2.default.inPlace.javaScript && (0, _keys2.default)(_configurator2.default.inPlace.javaScript).length) try {
                    const result = yield _helper2.default.inPlaceCSSAndJavaScriptAssetReferences(htmlPluginData.html, _configurator2.default.inPlace.cascadingStyleSheet, _configurator2.default.inPlace.javaScript, _configurator2.default.path.target.base, _configurator2.default.files.compose.cascadingStyleSheet, _configurator2.default.files.compose.javaScript, compilation.assets);
                    htmlPluginData.html = result.content;
                    filePathsToRemove.concat(result.filePathsToRemove);
                } catch (error) {
                    return callback(error, htmlPluginData);
                }
                callback(null, htmlPluginData);
            });

            return function (_x, _x2) {
                return _ref.apply(this, arguments);
            };
        })()));
        compiler.plugin('after-emit', (() => {
            var _ref2 = (0, _asyncToGenerator3.default)(function* (compilation, callback) {
                let promises = [];
                for (const path of filePathsToRemove) if (yield _clientnode2.default.isFile(path)) promises.push(new _promise2.default(function (resolve) {
                    return fileSystem.unlink(path, function (error) {
                        if (error) console.error(error);
                        resolve();
                    });
                }));
                yield _promise2.default.all(promises);
                promises = [];
                for (const type of ['javaScript', 'cascadingStyleSheet']) promises.push(new _promise2.default(function (resolve, reject) {
                    return fileSystem.readdir(_configurator2.default.path.target.asset[type], _configurator2.default.encoding, function (error, files) {
                        if (error) {
                            reject(error);
                            return;
                        }
                        if (files.length === 0) fileSystem.rmdir(_configurator2.default.path.target.asset[type], function (error) {
                            return error ? reject(error) : resolve();
                        });else resolve();
                    });
                }));
                yield _promise2.default.all(promises);
                callback();
            });

            return function (_x3, _x4) {
                return _ref2.apply(this, arguments);
            };
        })());
    } });
// /// endregion
// /// region remove chunks if a corresponding dll package exists
if (_configurator2.default.givenCommandLineArguments[2] !== 'build:dll') for (const chunkName in _configurator2.default.injection.internal.normalized) if (_configurator2.default.injection.internal.normalized.hasOwnProperty(chunkName)) {
    const manifestFilePath = `${_configurator2.default.path.target.base}/${chunkName}.` + `dll-manifest.json`;
    if (_configurator2.default.dllManifestFilePaths.includes(manifestFilePath)) {
        delete _configurator2.default.injection.internal.normalized[chunkName];
        const filePath = _helper2.default.renderFilePathTemplate(_helper2.default.stripLoader(_configurator2.default.files.compose.javaScript), { '[name]': chunkName });
        pluginInstances.push(new plugins.AddAssetHTMLPlugin({
            filepath: filePath,
            hash: true,
            includeSourcemap: _clientnode2.default.isFileSync(`${filePath}.map`)
        }));
        pluginInstances.push(new _webpack2.default.DllReferencePlugin({
            context: _configurator2.default.path.context, manifest: require(manifestFilePath) }));
    }
}
// /// endregion
// /// region generate common chunks
if (_configurator2.default.givenCommandLineArguments[2] !== 'build:dll') for (const chunkName of _configurator2.default.injection.commonChunkIDs) if (_configurator2.default.injection.internal.normalized.hasOwnProperty(chunkName)) pluginInstances.push(new _webpack2.default.optimize.CommonsChunkPlugin({
    async: false,
    children: false,
    filename: _path2.default.relative(_configurator2.default.path.target.base, _configurator2.default.files.compose.javaScript),
    minChunks: Infinity,
    name: chunkName,
    minSize: 0
}));
// /// endregion
// /// region mark empty javaScript modules as dummy
if (!_configurator2.default.needed.javaScript) _configurator2.default.files.compose.javaScript = _path2.default.resolve(_configurator2.default.path.target.asset.javaScript, '.__dummy__.compiled.js');
// /// endregion
// /// region extract cascading style sheets
if (_configurator2.default.files.compose.cascadingStyleSheet) pluginInstances.push(new plugins.ExtractText({
    allChunks: true, filename: _path2.default.relative(_configurator2.default.path.target.base, _configurator2.default.files.compose.cascadingStyleSheet)
}));
// /// endregion
// /// region performs implicit external logic
if (_configurator2.default.injection.external.modules === '__implicit__')
    /*
        We only want to process modules from local context in library mode,
        since a concrete project using this library should combine all assets
        (and deduplicate them) for optimal bundling results. NOTE: Only native
        javaScript and json modules will be marked as external dependency.
    */
    _configurator2.default.injection.external.modules = (context, request, callback) => {
        request = request.replace(/^!+/, '');
        if (request.startsWith('/')) request = _path2.default.relative(_configurator2.default.path.context, request);
        for (const filePath of _configurator2.default.module.directoryNames.concat(_configurator2.default.loader.directoryNames)) if (request.startsWith(filePath)) {
            request = request.substring(filePath.length);
            if (request.startsWith('/')) request = request.substring(1);
            break;
        }
        let resolvedRequest = _helper2.default.determineExternalRequest(request, _configurator2.default.path.context, context, _configurator2.default.injection.internal.normalized, _configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames, _configurator2.default.loader.directoryNames).map(filePath => _path2.default.resolve(_configurator2.default.path.context, filePath)).filter(filePath => !_configurator2.default.path.context.startsWith(filePath)), _configurator2.default.module.aliases, _configurator2.default.module.replacements.normal, _configurator2.default.extensions, _configurator2.default.path.source.asset.base, _configurator2.default.path.ignore, _configurator2.default.module.directoryNames, _configurator2.default.package.main.fileNames, _configurator2.default.package.main.propertyNames, _configurator2.default.package.aliasPropertyNames, _configurator2.default.injection.external.implicit.pattern.include, _configurator2.default.injection.external.implicit.pattern.exclude, _configurator2.default.inPlace.externalLibrary.normal, _configurator2.default.inPlace.externalLibrary.dynamic, _configurator2.default.encoding);
        if (resolvedRequest) {
            if (['var', 'umd'].includes(_configurator2.default.exportFormat.external) && request in _configurator2.default.injection.external.aliases) resolvedRequest = _configurator2.default.injection.external.aliases[request];
            if (_configurator2.default.exportFormat.external === 'var') resolvedRequest = _clientnode2.default.stringConvertToValidVariableName(resolvedRequest, '0-9a-zA-Z_$\\.');
            return callback(null, resolvedRequest, _configurator2.default.exportFormat.external);
        }
        return callback();
    };
// /// endregion
// /// region build dll packages
if (_configurator2.default.givenCommandLineArguments[2] === 'build:dll') {
    let dllChunkIDExists = false;
    for (const chunkName in _configurator2.default.injection.internal.normalized) if (_configurator2.default.injection.internal.normalized.hasOwnProperty(chunkName)) if (_configurator2.default.injection.dllChunkIDs.includes(chunkName)) dllChunkIDExists = true;else delete _configurator2.default.injection.internal.normalized[chunkName];
    if (dllChunkIDExists) {
        libraryName = '[name]DLLPackage';
        pluginInstances.push(new _webpack2.default.DllPlugin({
            path: `${_configurator2.default.path.target.base}/[name].dll-manifest.json`,
            name: libraryName
        }));
    } else console.warn('No dll chunk id found.');
}
// /// endregion
// // endregion
// // region apply final dom/javaScript modifications/fixes
pluginInstances.push({ apply: compiler => compiler.plugin('compilation', compilation => {
        compilation.plugin('html-webpack-plugin-alter-asset-tags', (htmlPluginData, callback) => {
            for (const tags of [htmlPluginData.body, htmlPluginData.head]) {
                let index = 0;
                for (const tag of tags) {
                    if (/^\.__dummy__(\..*)?$/.test(_path2.default.basename(tag.attributes.src || tag.attributes.href || ''))) tags.splice(index, 1);
                    index += 1;
                }
            }
            const assets = JSON.parse(htmlPluginData.plugin.assetJson);
            let index = 0;
            for (const assetRequest of assets) {
                if (/^\.__dummy__(\..*)?$/.test(_path2.default.basename(assetRequest))) assets.splice(index, 1);
                index += 1;
            }
            htmlPluginData.plugin.assetJson = (0, _stringify2.default)(assets);
            callback(null, htmlPluginData);
        });
        compilation.plugin('html-webpack-plugin-after-html-processing', (htmlPluginData, callback) => {
            let window;
            try {
                window = new _jsdom.JSDOM(htmlPluginData.html.replace(/<%/g, '##+#+#+##').replace(/%>/g, '##-#-#-##')).window;
            } catch (error) {
                return callback(error, htmlPluginData);
            }
            const linkables = {
                script: 'src', link: 'href' };
            for (const tagName in linkables) if (linkables.hasOwnProperty(tagName)) for (const domNode of window.document.querySelectorAll(`${tagName}[${linkables[tagName]}*="?` + `${_configurator2.default.hashAlgorithm}="]`))
            /*
                NOTE: Removing symbols after a "&" in hash string
                is necessary to match the generated request strings
                in offline plugin.
            */
            domNode.setAttribute(linkables[tagName], domNode.getAttribute(linkables[tagName]).replace(new RegExp(`(\\?${_configurator2.default.hashAlgorithm}=` + '[^&]+).*$'), '$1'));
            htmlPluginData.html = htmlPluginData.html.replace(/^(\s*<!doctype [^>]+?>\s*)[\s\S]*$/i, '$1') + window.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g, '<%').replace(/##-#-#-##/g, '%>');
            //  region post compilation
            for (const htmlFileSpecification of _configurator2.default.files.html) if (htmlFileSpecification.filename === htmlPluginData.plugin.options.filename) {
                for (const loaderConfiguration of htmlFileSpecification.template.use) if (loaderConfiguration.hasOwnProperty('options') && loaderConfiguration.options.hasOwnProperty('compileSteps') && typeof loaderConfiguration.options.compileSteps === 'number') htmlPluginData.html = _ejsLoader2.default.bind(_clientnode2.default.extendObject(true, {}, {
                    options: loaderConfiguration.options
                }, { options: {
                        compileSteps: htmlFileSpecification.template.postCompileSteps
                    } }))(htmlPluginData.html);
                break;
            }
            // endregion
            callback(null, htmlPluginData);
        });
    }) });
/*
    NOTE: The umd module export doesn't handle cases where the package name
    doesn't match exported library name. This post processing fixes this issue.
*/
if (_configurator2.default.exportFormat.external.startsWith('umd')) pluginInstances.push({ apply: compiler => compiler.plugin('emit', (compilation, callback) => {
        const bundleName = typeof libraryName === 'string' ? libraryName : libraryName[0];
        for (const assetRequest in compilation.assets) if (compilation.assets.hasOwnProperty(assetRequest) && assetRequest.replace(/([^?]+)\?.*$/, '$1').endsWith(_configurator2.default.build.types.javaScript.outputExtension)) {
            let source = compilation.assets[assetRequest].source();
            if (typeof source === 'string') {
                for (const replacement in _configurator2.default.injection.external.aliases) if (_configurator2.default.injection.external.aliases.hasOwnProperty(replacement)) source = source.replace(new RegExp('(require\\()"' + _clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[replacement]) + '"(\\))', 'g'), `$1'${replacement}'$2`).replace(new RegExp('(define\\("' + _clientnode2.default.stringEscapeRegularExpressions(bundleName) + '", \\[.*)"' + _clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[replacement]) + '"(.*\\], factory\\);)'), `$1'${replacement}'$2`);
                source = source.replace(new RegExp('(root\\[)"' + _clientnode2.default.stringEscapeRegularExpressions(bundleName) + '"(\\] = )'), `$1'` + _clientnode2.default.stringConvertToValidVariableName(bundleName) + `'$2`);
                compilation.assets[assetRequest] = new _webpackSources.RawSource(source);
            }
        }
        callback();
    }) });
// // endregion
// // region add automatic image compression
// NOTE: This plugin should be loaded at last to ensure that all emitted images
// ran through.
pluginInstances.push(new plugins.Imagemin(_configurator2.default.module.optimizer.image.content));
// // endregion
// // region context replacements
for (const contextReplacement of _configurator2.default.module.replacements.context) pluginInstances.push(new _webpack2.default.ContextReplacementPlugin(...contextReplacement.map(value => new Function('configuration', '__dirname', '__filename', `return ${value}`
// IgnoreTypeCheck
)(_configurator2.default, __dirname, __filename))));
// // endregion
// / endregion
// / region loader helper
const rejectFilePathInDependencies = filePath => {
    filePath = _helper2.default.stripLoader(filePath);
    return _helper2.default.isFilePathInLocation(filePath, _configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames, _configurator2.default.loader.directoryNames).map(filePath => _path2.default.resolve(_configurator2.default.path.context, filePath)).filter(filePath => !_configurator2.default.path.context.startsWith(filePath)));
};
const loader = {};
const evaluate = (code, filePath) => new Function('configuration', 'filePath', 'loader', 'rejectFilePathInDependencies', `return ${code}`
// IgnoreTypeCheck
)(_configurator2.default, filePath, loader, rejectFilePathInDependencies);
_clientnode2.default.extendObject(loader, {
    // Convert to compatible native web types.
    // region generic template
    ejs: {
        exclude: filePath => _helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map(htmlConfiguration => htmlConfiguration.template.filePath)).includes(filePath) || (_configurator2.default.module.preprocessor.ejs.exclude === null ? false : evaluate(_configurator2.default.module.preprocessor.ejs.exclude, filePath)),
        include: _helper2.default.normalizePaths([_configurator2.default.path.source.base].concat(_configurator2.default.module.locations.directoryPaths)),
        test: /^(?!.+\.html\.ejs$).+\.ejs$/i,
        use: [{ loader: 'file?name=[path][name]' + (Boolean(_configurator2.default.module.preprocessor.ejs.options.compileSteps % 2) ? '.js' : '') + `?${_configurator2.default.hashAlgorithm}=[hash]` }, { loader: 'extract' }, {
            loader: _configurator2.default.module.preprocessor.ejs.loader,
            options: _configurator2.default.module.preprocessor.ejs.options
        }].concat(_configurator2.default.module.preprocessor.ejs.additional.map(evaluate))
    },
    // endregion
    // region script
    script: {
        exclude: filePath => _configurator2.default.module.preprocessor.javaScript.exclude === null ? rejectFilePathInDependencies(filePath) : evaluate(_configurator2.default.module.preprocessor.javaScript.exclude, filePath),
        include: _helper2.default.normalizePaths([_configurator2.default.path.source.asset.javaScript].concat(_configurator2.default.module.locations.directoryPaths)),
        test: /\.js(?:\?.*)?$/i,
        use: [{
            loader: _configurator2.default.module.preprocessor.javaScript.loader,
            options: _configurator2.default.module.preprocessor.javaScript.options
        }].concat(_configurator2.default.module.preprocessor.javaScript.additional.map(evaluate))
    },
    // endregion
    // region html template
    html: {
        // NOTE: This is only for the main entry template.
        main: {
            test: new RegExp('^' + _clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.files.defaultHTML.template.filePath) + '(?:\\?.*)?$'),
            use: _configurator2.default.files.defaultHTML.template.use
        },
        ejs: {
            exclude: filePath => _helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map(htmlConfiguration => htmlConfiguration.template.filePath)).includes(filePath) || (_configurator2.default.module.preprocessor.html.exclude === null ? false : evaluate(_configurator2.default.module.preprocessor.html.exclude, filePath)),
            include: _configurator2.default.path.source.asset.template,
            test: /\.html\.ejs(?:\?.*)?$/i,
            use: [{ loader: 'file?name=' + _path2.default.join(_path2.default.relative(_configurator2.default.path.target.asset.base, _configurator2.default.path.target.asset.template), '[name]' + (Boolean(_configurator2.default.module.preprocessor.html.options.compileSteps % 2) ? '.js' : '') + `?${_configurator2.default.hashAlgorithm}=[hash]`) }].concat(Boolean(_configurator2.default.module.preprocessor.html.options.compileSteps % 2) ? [] : [{ loader: 'extract' }, {
                loader: _configurator2.default.module.html.loader,
                options: _configurator2.default.module.html.options
            }], {
                loader: _configurator2.default.module.preprocessor.html.loader,
                options: _configurator2.default.module.preprocessor.html.options
            }).concat(_configurator2.default.module.preprocessor.html.additional.map(evaluate))
        },
        html: {
            exclude: filePath => _helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map(htmlConfiguration => htmlConfiguration.template.filePath)).includes(filePath) || (_configurator2.default.module.html.exclude === null ? true : evaluate(_configurator2.default.module.html.exclude, filePath)),
            include: _configurator2.default.path.source.asset.template,
            test: /\.html(?:\?.*)?$/i,
            use: [{ loader: 'file?name=' + _path2.default.join(_path2.default.relative(_configurator2.default.path.target.base, _configurator2.default.path.target.asset.template), `[name].[ext]?${_configurator2.default.hashAlgorithm}=[hash]`) }, { loader: 'extract' }, {
                loader: _configurator2.default.module.html.loader,
                options: _configurator2.default.module.html.options
            }].concat(_configurator2.default.module.html.additional.map(evaluate))
        }
    },
    // endregion
    // Load dependencies.
    // region style
    style: {
        exclude: filePath => _configurator2.default.module.cascadingStyleSheet.exclude === null ? rejectFilePathInDependencies(filePath) : evaluate(_configurator2.default.module.cascadingStyleSheet.exclude, filePath),
        include: _helper2.default.normalizePaths([_configurator2.default.path.source.asset.cascadingStyleSheet].concat(_configurator2.default.module.locations.directoryPaths)),
        test: /\.s?css(?:\?.*)?$/i,
        use: [{
            loader: _configurator2.default.module.style.loader,
            options: _configurator2.default.module.style.options
        }, {
            loader: _configurator2.default.module.cascadingStyleSheet.loader,
            options: _configurator2.default.module.cascadingStyleSheet.options
        }, {
            loader: _configurator2.default.module.preprocessor.cascadingStyleSheet.loader,
            options: _clientnode2.default.extendObject(true, {
                ident: 'postcss',
                plugins: () => [(0, _postcssImport2.default)({
                    addDependencyTo: _webpack2.default,
                    root: _configurator2.default.path.context
                }), (0, _postcssCssnext2.default)({ browsers: '> 0%' }),
                /*
                    NOTE: Checking path doesn't work if fonts are
                    referenced in libraries provided in another
                    location than the project itself like the
                    "node_modules" folder.
                */
                (0, _postcssFontpath2.default)({ checkPath: false }), (0, _postcssUrl2.default)({ url: 'rebase' }), (0, _postcssSprites2.default)({
                    filterBy: () => new _promise2.default((resolve, reject) => (_configurator2.default.files.compose.image ? resolve : reject)()),
                    hooks: { onSaveSpritesheet: image => _path2.default.join(image.spritePath, _path2.default.relative(_configurator2.default.path.target.asset.image, _configurator2.default.files.compose.image))
                    },
                    stylesheetPath: _configurator2.default.path.source.asset.cascadingStyleSheet,
                    spritePath: _configurator2.default.path.source.asset.image
                })]
            }, _configurator2.default.module.preprocessor.cascadingStyleSheet.options)
        }].concat(_configurator2.default.module.preprocessor.cascadingStyleSheet.additional.map(evaluate))
    },
    // endregion
    // Optimize loaded assets.
    // region font
    font: {
        eot: {
            exclude: filePath => _configurator2.default.module.optimizer.font.eot.exclude === null ? false : evaluate(_configurator2.default.module.optimizer.font.eot.exclude, filePath),
            include: _configurator2.default.path.base,
            test: /\.eot(?:\?.*)?$/i,
            use: [{
                loader: _configurator2.default.module.optimizer.font.eot.loader,
                options: _configurator2.default.module.optimizer.font.eot.options
            }].concat(_configurator2.default.module.optimizer.font.eot.additional.map(evaluate))
        },
        svg: {
            exclude: filePath => _configurator2.default.module.optimizer.font.svg.exclude === null ? false : evaluate(_configurator2.default.module.optimizer.font.svg.exclude, filePath),
            include: _configurator2.default.path.base,
            test: /\.svg(?:\?.*)?$/i,
            use: [{
                loader: _configurator2.default.module.optimizer.font.svg.loader,
                options: _configurator2.default.module.optimizer.font.svg.options
            }].concat(_configurator2.default.module.optimizer.font.svg.additional.map(evaluate))
        },
        ttf: {
            exclude: filePath => _configurator2.default.module.optimizer.font.ttf.exclude === null ? false : evaluate(_configurator2.default.module.optimizer.font.ttf.exclude, filePath),
            include: _configurator2.default.path.base,
            test: /\.ttf(?:\?.*)?$/i,
            use: [{
                loader: _configurator2.default.module.optimizer.font.ttf.loader,
                options: _configurator2.default.module.optimizer.font.ttf.options
            }].concat(_configurator2.default.module.optimizer.font.ttf.additional.map(evaluate))
        },
        woff: {
            exclude: filePath => _configurator2.default.module.optimizer.font.woff.exclude === null ? false : evaluate(_configurator2.default.module.optimizer.font.woff.exclude, filePath),
            include: _configurator2.default.path.base,
            test: /\.woff2?(?:\?.*)?$/i,
            use: [{
                loader: _configurator2.default.module.optimizer.font.woff.loader,
                options: _configurator2.default.module.optimizer.font.woff.options
            }].concat(_configurator2.default.module.optimizer.font.woff.additional.map(evaluate))
        }
    },
    // endregion
    // region image
    image: {
        exclude: filePath => _configurator2.default.module.optimizer.image.exclude === null ? rejectFilePathInDependencies(filePath) : evaluate(_configurator2.default.module.optimizer.image.exclude, filePath),
        include: _configurator2.default.path.source.asset.image,
        test: /\.(?:png|jpg|ico|gif)(?:\?.*)?$/i,
        use: [{
            loader: _configurator2.default.module.optimizer.image.loader,
            options: _configurator2.default.module.optimizer.image.file
        }].concat(_configurator2.default.module.optimizer.image.additional.map(evaluate))
    },
    // endregion
    // region data
    data: {
        exclude: filePath => _configurator2.default.extensions.file.internal.includes(_path2.default.extname(_helper2.default.stripLoader(filePath))) || (_configurator2.default.module.optimizer.data.exclude === null ? rejectFilePathInDependencies(filePath) : evaluate(_configurator2.default.module.optimizer.data.exclude, filePath)),
        include: _configurator2.default.path.source.asset.data,
        test: /.+/,
        use: [{
            loader: _configurator2.default.module.optimizer.data.loader,
            options: _configurator2.default.module.optimizer.data.options
        }].concat(_configurator2.default.module.optimizer.data.additional.map(evaluate))
        // endregion
    } });
if (_configurator2.default.files.compose.cascadingStyleSheet) {
    loader.style.use.shift();
    loader.style.use = plugins.ExtractText.extract({ use: loader.style.use });
}
// / endregion
// endregion
// region configuration
const webpackConfiguration = {
    bail: true,
    cache: _configurator2.default.cache.main,
    context: _configurator2.default.path.context,
    devtool: _configurator2.default.development.tool,
    devServer: _configurator2.default.development.server,
    // region input
    entry: _configurator2.default.injection.internal.normalized,
    externals: _configurator2.default.injection.external.modules,
    resolve: {
        alias: _configurator2.default.module.aliases,
        aliasFields: _configurator2.default.package.aliasPropertyNames,
        extensions: _configurator2.default.extensions.file.internal,
        mainFields: _configurator2.default.package.main.propertyNames,
        mainFiles: _configurator2.default.package.main.fileNames,
        moduleExtensions: _configurator2.default.extensions.module,
        modules: _helper2.default.normalizePaths(_configurator2.default.module.directoryNames),
        unsafeCache: _configurator2.default.cache.unsafe
    },
    resolveLoader: {
        alias: _configurator2.default.loader.aliases,
        aliasFields: _configurator2.default.package.aliasPropertyNames,
        extensions: _configurator2.default.loader.extensions.file,
        mainFields: _configurator2.default.package.main.propertyNames,
        mainFiles: _configurator2.default.package.main.fileNames,
        moduleExtensions: _configurator2.default.loader.extensions.module,
        modules: _configurator2.default.loader.directoryNames
    },
    // endregion
    // region output
    output: {
        filename: _path2.default.relative(_configurator2.default.path.target.base, _configurator2.default.files.compose.javaScript),
        hashFunction: _configurator2.default.hashAlgorithm,
        library: libraryName,
        libraryTarget: _configurator2.default.givenCommandLineArguments[2] === 'build:dll' ? 'var' : _configurator2.default.exportFormat.self,
        path: _configurator2.default.path.target.base,
        publicPath: _configurator2.default.path.target.public,
        pathinfo: _configurator2.default.debug,
        umdNamedDefine: true
    },
    performance: _configurator2.default.performanceHints,
    target: _configurator2.default.targetTechnology,
    // endregion
    module: {
        rules: _configurator2.default.module.additional.map(loaderConfiguration => {
            return {
                exclude: filePath => evaluate(loaderConfiguration.exclude || 'false', filePath),
                include: loaderConfiguration.include && evaluate(loaderConfiguration.include, _configurator2.default.path.context) || _configurator2.default.path.source.base,
                test: new RegExp(evaluate(loaderConfiguration.test, _configurator2.default.path.context)),
                use: evaluate(loaderConfiguration.use)
            };
        }).concat([loader.ejs, loader.script, loader.html.main, loader.html.ejs, loader.html.html, loader.style, loader.font.eot, loader.font.svg, loader.font.ttf, loader.font.woff, loader.image, loader.data])
    },
    node: _configurator2.default.nodeEnvironment,
    plugins: pluginInstances
};
if (!Array.isArray(_configurator2.default.module.skipParseRegularExpressions) || _configurator2.default.module.skipParseRegularExpressions.length) webpackConfiguration.module.noParse = _configurator2.default.module.skipParseRegularExpressions;
if (_configurator2.default.showConfiguration) {
    console.info('Using internal configuration:', _util2.default.inspect(_configurator2.default, {
        depth: null }));
    console.info('-----------------------------------------------------------');
    console.info('Using webpack configuration:', _util2.default.inspect(webpackConfiguration, { depth: null }));
}
// endregion
exports.default = webpackConfiguration;
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2tDb25maWd1cmF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7OztBQUNBOzs7O0FBSUE7O0FBQ0E7O0lBQVksVTs7QUFDWjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFLQTs7OztBQUNBOzs7O0FBRUE7O0FBVUE7Ozs7QUFFQTs7OztBQUNBOzs7O0FBS0E7Ozs7QUFRQTs7Ozs7Ozs7QUFqQ0E7O0FBVEE7O0FBRkE7QUFZQSxJQUFJO0FBQ0EsWUFBUSw2QkFBUjtBQUNILENBRkQsQ0FFRSxPQUFPLEtBQVAsRUFBYyxDQUFFOztBQUdsQixNQUFNLFVBQVUsUUFBUSxzQkFBUixHQUFoQjs7O0FBR0EsUUFBUSxJQUFSLEdBQWUsUUFBUSxJQUF2QjtBQUNBLFFBQVEsV0FBUixHQUFzQixRQUFRLFdBQTlCO0FBQ0EsUUFBUSxrQkFBUixHQUE2QixRQUFRLCtCQUFSLENBQTdCO0FBQ0EsUUFBUSxXQUFSLEdBQXNCLFFBQVEsV0FBOUI7QUFDQSxRQUFRLE9BQVIsR0FBa0IsUUFBUSx5QkFBUixDQUFsQjtBQUNBLFFBQVEsUUFBUixHQUFtQixRQUFRLHlCQUFSLEVBQW1DLE9BQXREO0FBQ0EsUUFBUSxPQUFSLEdBQWtCLFFBQVEsZ0JBQVIsQ0FBbEI7O0FBT0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsS0FBUixDQUFjLFFBQVEsT0FBUixDQUFnQixhQUFoQixDQUFkLEVBQThDLE9BQTlDLEdBQXdELFVBQ3BELEdBQUcsU0FEaUQsRUFFbEQ7QUFDRix5QkFBTSxZQUFOLENBQW1CLElBQW5CLEVBQXlCLEtBQUssT0FBOUIsRUFBdUMsTUFBdkMsRUFBK0MsS0FBSyxPQUFwRDtBQUNBLFdBQU8scUJBQXVCLElBQXZCLENBQTRCLElBQTVCLEVBQWtDLEdBQUcsU0FBckMsQ0FBUDtBQUNILENBTEQ7QUFNQTs7QUFF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QUFkLENBQXFCLDJCQUFyQixDQUFpRCxNQUZyRCxFQUlJLHFCQUFxQixNQUFyQixDQUE0QixPQUE1QixHQUNJLHVCQUFjLE1BQWQsQ0FBcUIsMkJBRHpCO0FBRUosSUFBSSx1QkFBYyxpQkFBbEIsRUFBcUM7QUFDakMsWUFBUSxJQUFSLENBQWEsK0JBQWIsRUFBOEMsZUFBSyxPQUFMLHlCQUE0QjtBQUN0RSxlQUFPLElBRCtELEVBQTVCLENBQTlDO0FBRUEsWUFBUSxJQUFSLENBQWEsNkRBQWI7QUFDQSxZQUFRLElBQVIsQ0FBYSw4QkFBYixFQUE2QyxlQUFLLE9BQUwsQ0FDekMsb0JBRHlDLEVBQ25CLEVBQUMsT0FBTyxJQUFSLEVBRG1CLENBQTdDO0FBRUg7QUFDRDtrQkFDZSxvQjtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IndlYnBhY2tDb25maWd1cmF0b3IuY29tcGlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIEBmbG93XG4vLyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbid1c2Ugc3RyaWN0J1xuLyogIVxuICAgIHJlZ2lvbiBoZWFkZXJcbiAgICBDb3B5cmlnaHQgVG9yYmVuIFNpY2tlcnQgKGluZm9bXCJ+YXR+XCJddG9yYmVuLndlYnNpdGUpIDE2LjEyLjIwMTJcblxuICAgIExpY2Vuc2VcbiAgICAtLS0tLS0tXG5cbiAgICBUaGlzIGxpYnJhcnkgd3JpdHRlbiBieSBUb3JiZW4gU2lja2VydCBzdGFuZCB1bmRlciBhIGNyZWF0aXZlIGNvbW1vbnMgbmFtaW5nXG4gICAgMy4wIHVucG9ydGVkIGxpY2Vuc2UuIHNlZSBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvZGVlZC5kZVxuICAgIGVuZHJlZ2lvblxuKi9cbi8vIHJlZ2lvbiBpbXBvcnRzXG5pbXBvcnQgQmFiZWxNaW5pZnlQbHVnaW4gZnJvbSAnYmFiaWxpLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IFRvb2xzIGZyb20gJ2NsaWVudG5vZGUnXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHR5cGUge0RvbU5vZGUsIFBsYWluT2JqZWN0LCBQcm9jZWR1cmVGdW5jdGlvbiwgV2luZG93fSBmcm9tICdjbGllbnRub2RlJ1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHtKU0RPTSBhcyBET019IGZyb20gJ2pzZG9tJ1xuaW1wb3J0ICogYXMgZmlsZVN5c3RlbSBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgcG9zdGNzc0NTU25leHQgZnJvbSAncG9zdGNzcy1jc3NuZXh0J1xuaW1wb3J0IHBvc3Rjc3NGb250UGF0aCBmcm9tICdwb3N0Y3NzLWZvbnRwYXRoJ1xuaW1wb3J0IHBvc3Rjc3NJbXBvcnQgZnJvbSAncG9zdGNzcy1pbXBvcnQnXG5pbXBvcnQgcG9zdGNzc1Nwcml0ZXMgZnJvbSAncG9zdGNzcy1zcHJpdGVzJ1xuaW1wb3J0IHBvc3Rjc3NVUkwgZnJvbSAncG9zdGNzcy11cmwnXG4vLyBOT1RFOiBPbmx5IG5lZWRlZCBmb3IgZGVidWdnaW5nIHRoaXMgZmlsZS5cbnRyeSB7XG4gICAgcmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJylcbn0gY2F0Y2ggKGVycm9yKSB7fVxuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snXG5jb25zdCBwbHVnaW5zID0gcmVxdWlyZSgnd2VicGFjay1sb2FkLXBsdWdpbnMnKSgpXG5pbXBvcnQge1Jhd1NvdXJjZSBhcyBXZWJwYWNrUmF3U291cmNlfSBmcm9tICd3ZWJwYWNrLXNvdXJjZXMnXG5cbnBsdWdpbnMuSFRNTCA9IHBsdWdpbnMuaHRtbFxucGx1Z2lucy5FeHRyYWN0VGV4dCA9IHBsdWdpbnMuZXh0cmFjdFRleHRcbnBsdWdpbnMuQWRkQXNzZXRIVE1MUGx1Z2luID0gcmVxdWlyZSgnYWRkLWFzc2V0LWh0bWwtd2VicGFjay1wbHVnaW4nKVxucGx1Z2lucy5PcGVuQnJvd3NlciA9IHBsdWdpbnMub3BlbkJyb3dzZXJcbnBsdWdpbnMuRmF2aWNvbiA9IHJlcXVpcmUoJ2Zhdmljb25zLXdlYnBhY2stcGx1Z2luJylcbnBsdWdpbnMuSW1hZ2VtaW4gPSByZXF1aXJlKCdpbWFnZW1pbi13ZWJwYWNrLXBsdWdpbicpLmRlZmF1bHRcbnBsdWdpbnMuT2ZmbGluZSA9IHJlcXVpcmUoJ29mZmxpbmUtcGx1Z2luJylcblxuaW1wb3J0IGVqc0xvYWRlciBmcm9tICcuL2Vqc0xvYWRlci5jb21waWxlZCdcbmltcG9ydCB0eXBlIHtIVE1MQ29uZmlndXJhdGlvbiwgV2VicGFja0NvbmZpZ3VyYXRpb259IGZyb20gJy4vdHlwZSdcbmltcG9ydCBjb25maWd1cmF0aW9uIGZyb20gJy4vY29uZmlndXJhdG9yLmNvbXBpbGVkJ1xuaW1wb3J0IEhlbHBlciBmcm9tICcuL2hlbHBlci5jb21waWxlZCdcblxuLy8gLyByZWdpb24gbW9ua2V5IHBhdGNoZXNcbi8vIE1vbmtleS1QYXRjaCBodG1sIGxvYWRlciB0byByZXRyaWV2ZSBodG1sIGxvYWRlciBvcHRpb25zIHNpbmNlIHRoZVxuLy8gXCJ3ZWJwYWNrLWh0bWwtcGx1Z2luXCIgZG9lc24ndCBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgbG9hZGVyIGludGVyZmFjZS5cbmltcG9ydCBodG1sTG9hZGVyTW9kdWxlQmFja3VwIGZyb20gJ2h0bWwtbG9hZGVyJ1xucmVxdWlyZS5jYWNoZVtyZXF1aXJlLnJlc29sdmUoJ2h0bWwtbG9hZGVyJyldLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICAuLi5wYXJhbWV0ZXI6QXJyYXk8YW55PlxuKTphbnkge1xuICAgIFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCB0aGlzLm9wdGlvbnMsIG1vZHVsZSwgdGhpcy5vcHRpb25zKVxuICAgIHJldHVybiBodG1sTG9hZGVyTW9kdWxlQmFja3VwLmNhbGwodGhpcywgLi4ucGFyYW1ldGVyKVxufVxuLy8gTW9ua2V5LVBhdGNoIGxvYWRlci11dGlscyB0byBkZWZpbmUgd2hpY2ggdXJsIGlzIGEgbG9jYWwgcmVxdWVzdC5cbmltcG9ydCBsb2FkZXJVdGlsc01vZHVsZUJhY2t1cCBmcm9tICdsb2FkZXItdXRpbHMnXG5jb25zdCBsb2FkZXJVdGlsc0lzVXJsUmVxdWVzdEJhY2t1cDoodXJsOnN0cmluZykgPT4gYm9vbGVhbiA9XG4gICAgbG9hZGVyVXRpbHNNb2R1bGVCYWNrdXAuaXNVcmxSZXF1ZXN0XG5yZXF1aXJlLmNhY2hlW3JlcXVpcmUucmVzb2x2ZSgnbG9hZGVyLXV0aWxzJyldLmV4cG9ydHMuaXNVcmxSZXF1ZXN0ID0gKFxuICAgIHVybDpzdHJpbmcsIC4uLmFkZGl0aW9uYWxQYXJhbWV0ZXI6QXJyYXk8YW55PlxuKTpib29sZWFuID0+IHtcbiAgICBpZiAodXJsLm1hdGNoKC9eW2Etel0rOi4rLykpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBsb2FkZXJVdGlsc0lzVXJsUmVxdWVzdEJhY2t1cC5hcHBseShcbiAgICAgICAgbG9hZGVyVXRpbHNNb2R1bGVCYWNrdXAsIFt1cmxdLmNvbmNhdChhZGRpdGlvbmFsUGFyYW1ldGVyKSlcbn1cbi8vIC8gZW5kcmVnaW9uXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBpbml0aWFsaXNhdGlvblxuLy8gLyByZWdpb24gZGV0ZXJtaW5lIGxpYnJhcnkgbmFtZVxubGV0IGxpYnJhcnlOYW1lOnN0cmluZ1xuaWYgKCdsaWJyYXJ5TmFtZScgaW4gY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmxpYnJhcnlOYW1lKVxuICAgIGxpYnJhcnlOYW1lID0gY29uZmlndXJhdGlvbi5saWJyYXJ5TmFtZVxuZWxzZSBpZiAoT2JqZWN0LmtleXMoY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZCkubGVuZ3RoID4gMSlcbiAgICBsaWJyYXJ5TmFtZSA9ICdbbmFtZV0nXG5lbHNlIHtcbiAgICBsaWJyYXJ5TmFtZSA9IGNvbmZpZ3VyYXRpb24ubmFtZVxuICAgIGlmIChjb25maWd1cmF0aW9uLmV4cG9ydEZvcm1hdC5zZWxmID09PSAndmFyJylcbiAgICAgICAgbGlicmFyeU5hbWUgPSBUb29scy5zdHJpbmdDb252ZXJ0VG9WYWxpZFZhcmlhYmxlTmFtZShsaWJyYXJ5TmFtZSlcbn1cbi8vIC8gZW5kcmVnaW9uXG4vLyAvIHJlZ2lvbiBwbHVnaW5zXG5jb25zdCBwbHVnaW5JbnN0YW5jZXM6QXJyYXk8T2JqZWN0PiA9IFtcbiAgICBuZXcgd2VicGFjay5Ob0VtaXRPbkVycm9yc1BsdWdpbigpLFxuICAgIG5ldyB3ZWJwYWNrLm9wdGltaXplLk9jY3VycmVuY2VPcmRlclBsdWdpbih0cnVlKVxuXVxuaWYgKGNvbmZpZ3VyYXRpb24uZGVidWcpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suTmFtZWRNb2R1bGVzUGx1Z2luKCkpXG4vLyAvLyByZWdpb24gZGVmaW5lIG1vZHVsZXMgdG8gaWdub3JlXG5mb3IgKGNvbnN0IGlnbm9yZVBhdHRlcm46c3RyaW5nIG9mIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmlnbm9yZVBhdHRlcm4pXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suSWdub3JlUGx1Z2luKG5ldyBSZWdFeHAoaWdub3JlUGF0dGVybikpKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gZGVmaW5lIG1vZHVsZXMgdG8gcmVwbGFjZVxuZm9yIChjb25zdCBzb3VyY2U6c3RyaW5nIGluIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwpXG4gICAgaWYgKGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwuaGFzT3duUHJvcGVydHkoc291cmNlKSlcbiAgICAgICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suTm9ybWFsTW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4oXG4gICAgICAgICAgICBuZXcgUmVnRXhwKHNvdXJjZSksXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMubm9ybWFsW3NvdXJjZV0pKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gZ2VuZXJhdGUgaHRtbCBmaWxlXG5sZXQgaHRtbEF2YWlsYWJsZTpib29sZWFuID0gZmFsc2VcbmlmIChjb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl0gIT09ICdidWlsZDpkbGwnKVxuICAgIGZvciAobGV0IGh0bWxDb25maWd1cmF0aW9uOkhUTUxDb25maWd1cmF0aW9uIG9mIGNvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbClcbiAgICAgICAgaWYgKFRvb2xzLmlzRmlsZVN5bmMoaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUuZmlsZVBhdGgpKSB7XG4gICAgICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5IVE1MKFRvb2xzLmV4dGVuZE9iamVjdChcbiAgICAgICAgICAgICAgICB7fSwgaHRtbENvbmZpZ3VyYXRpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLnJlcXVlc3R9KSkpXG4gICAgICAgICAgICBodG1sQXZhaWxhYmxlID0gdHJ1ZVxuICAgICAgICB9XG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBnZW5lcmF0ZSBmYXZpY29uc1xuaWYgKGh0bWxBdmFpbGFibGUgJiYgY29uZmlndXJhdGlvbi5mYXZpY29uICYmIFRvb2xzLmlzRmlsZVN5bmMoXG4gICAgY29uZmlndXJhdGlvbi5mYXZpY29uLmxvZ29cbikpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHBsdWdpbnMuRmF2aWNvbihjb25maWd1cmF0aW9uLmZhdmljb24pKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gcHJvdmlkZSBvZmZsaW5lIGZ1bmN0aW9uYWxpdHlcbmlmIChodG1sQXZhaWxhYmxlICYmIGNvbmZpZ3VyYXRpb24ub2ZmbGluZSkge1xuICAgIGlmICghWydzZXJ2ZScsICd0ZXN0OmJyb3dzZXInXS5pbmNsdWRlcyhcbiAgICAgICAgY29uZmlndXJhdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdXG4gICAgKSlcbiAgICAgICAgZm9yIChjb25zdCB0eXBlOlBsYWluT2JqZWN0IG9mIFtcbiAgICAgICAgICAgIFsnY2FzY2FkaW5nU3R5bGVTaGVldCcsICdjc3MnXSxcbiAgICAgICAgICAgIFsnamF2YVNjcmlwdCcsICdqcyddXG4gICAgICAgIF0pXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5pblBsYWNlW3R5cGVbMF1dKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlczpBcnJheTxzdHJpbmc+ID0gT2JqZWN0LmtleXMoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZVt0eXBlWzBdXSlcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWU6c3RyaW5nIG9mIG1hdGNoZXMpXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ub2ZmbGluZS5leGNsdWRlcy5wdXNoKHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0W3R5cGVbMF1dXG4gICAgICAgICAgICAgICAgICAgICkgKyBgJHtuYW1lfS4ke3R5cGVbMV19PyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT0qYClcbiAgICAgICAgICAgIH1cbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5PZmZsaW5lKGNvbmZpZ3VyYXRpb24ub2ZmbGluZSkpXG59XG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBvcGVucyBicm93c2VyIGF1dG9tYXRpY2FsbHlcbmlmIChjb25maWd1cmF0aW9uLmRldmVsb3BtZW50Lm9wZW5Ccm93c2VyICYmIChodG1sQXZhaWxhYmxlICYmIFtcbiAgICAnc2VydmUnLCAndGVzdDpicm93c2VyJ1xuXS5pbmNsdWRlcyhjb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl0pKSlcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5PcGVuQnJvd3NlcihcbiAgICAgICAgY29uZmlndXJhdGlvbi5kZXZlbG9wbWVudC5vcGVuQnJvd3NlcikpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBwcm92aWRlIGJ1aWxkIGVudmlyb25tZW50XG5pZiAoY29uZmlndXJhdGlvbi5idWlsZC5kZWZpbml0aW9ucylcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oXG4gICAgICAgIGNvbmZpZ3VyYXRpb24uYnVpbGQuZGVmaW5pdGlvbnMpKVxuaWYgKGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByb3ZpZGUpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suUHJvdmlkZVBsdWdpbihcbiAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJvdmlkZSkpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBtb2R1bGVzL2Fzc2V0c1xuLy8gLy8vIHJlZ2lvbiBwZXJmb3JtIGphdmFTY3JpcHQgbWluaWZpY2F0aW9uL29wdGltaXNhdGlvblxuaWYgKGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5iYWJlbE1pbmlmeSlcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgQmFiZWxNaW5pZnlQbHVnaW4oXG4gICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5iYWJlbE1pbmlmeSkpXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIGFwcGx5IG1vZHVsZSBwYXR0ZXJuXG5wbHVnaW5JbnN0YW5jZXMucHVzaCh7YXBwbHk6IChjb21waWxlcjpPYmplY3QpOnZvaWQgPT4ge1xuICAgIGNvbXBpbGVyLnBsdWdpbignZW1pdCcsIChcbiAgICAgICAgY29tcGlsYXRpb246T2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICk6dm9pZCA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcmVxdWVzdDpzdHJpbmcgaW4gY29tcGlsYXRpb24uYXNzZXRzKVxuICAgICAgICAgICAgaWYgKGNvbXBpbGF0aW9uLmFzc2V0cy5oYXNPd25Qcm9wZXJ0eShyZXF1ZXN0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoOnN0cmluZyA9IHJlcXVlc3QucmVwbGFjZSgvXFw/W14/XSskLywgJycpXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZTo/c3RyaW5nID0gSGVscGVyLmRldGVybWluZUFzc2V0VHlwZShcbiAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGgsIGNvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMsIGNvbmZpZ3VyYXRpb24ucGF0aClcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAmJiBjb25maWd1cmF0aW9uLmFzc2V0UGF0dGVyblt0eXBlXSAmJiAhKG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uYXNzZXRQYXR0ZXJuW3R5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXhjbHVkZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICApKS50ZXN0KGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2U6P3N0cmluZyA9IGNvbXBpbGF0aW9uLmFzc2V0c1tyZXF1ZXN0XS5zb3VyY2UoKVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbi5hc3NldHNbcmVxdWVzdF0gPSBuZXcgV2VicGFja1Jhd1NvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmFzc2V0UGF0dGVyblt0eXBlXS5wYXR0ZXJuLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cXHsxXFx9L2csIHNvdXJjZS5yZXBsYWNlKC9cXCQvZywgJyQkJCcpKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICB9KVxufX0pXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIGluLXBsYWNlIGNvbmZpZ3VyZWQgYXNzZXRzIGluIHRoZSBtYWluIGh0bWwgZmlsZVxuaWYgKGh0bWxBdmFpbGFibGUgJiYgIVsnc2VydmUnLCAndGVzdDpicm93c2VyJ10uaW5jbHVkZXMoXG4gICAgY29uZmlndXJhdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdXG4pKVxuICAgIHBsdWdpbkluc3RhbmNlcy5wdXNoKHthcHBseTogKGNvbXBpbGVyOk9iamVjdCk6dm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoc1RvUmVtb3ZlOkFycmF5PHN0cmluZz4gPSBbXVxuICAgICAgICBjb21waWxlci5wbHVnaW4oJ2NvbXBpbGF0aW9uJywgKGNvbXBpbGF0aW9uOk9iamVjdCk6dm9pZCA9PlxuICAgICAgICAgICAgY29tcGlsYXRpb24ucGx1Z2luKFxuICAgICAgICAgICAgICAgICdodG1sLXdlYnBhY2stcGx1Z2luLWFmdGVyLWh0bWwtcHJvY2Vzc2luZycsIGFzeW5jIChcbiAgICAgICAgICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGE6UGxhaW5PYmplY3QsIGNhbGxiYWNrOlByb2NlZHVyZUZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKTpQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pblBsYWNlLmNhc2NhZGluZ1N0eWxlU2hlZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5jYXNjYWRpbmdTdHlsZVNoZWV0XG4gICAgICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCB8fCBjb25maWd1cmF0aW9uLmluUGxhY2UuamF2YVNjcmlwdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlndXJhdGlvbi5pblBsYWNlLmphdmFTY3JpcHQpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6c3RyaW5nLCBmaWxlUGF0aHNUb1JlbW92ZTpBcnJheTxzdHJpbmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGF3YWl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5pblBsYWNlQ1NTQW5kSmF2YVNjcmlwdEFzc2V0UmVmZXJlbmNlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLmh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluUGxhY2UuY2FzY2FkaW5nU3R5bGVTaGVldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5qYXZhU2NyaXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhc2NhZGluZ1N0eWxlU2hlZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmNvbXBvc2UuamF2YVNjcmlwdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLmFzc2V0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sUGx1Z2luRGF0YS5odG1sID0gcmVzdWx0LmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUGF0aHNUb1JlbW92ZS5jb25jYXQocmVzdWx0LmZpbGVQYXRoc1RvUmVtb3ZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IsIGh0bWxQbHVnaW5EYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBodG1sUGx1Z2luRGF0YSlcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgY29tcGlsZXIucGx1Z2luKCdhZnRlci1lbWl0JywgYXN5bmMgKFxuICAgICAgICAgICAgY29tcGlsYXRpb246T2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICAgICApOlByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICAgICAgbGV0IHByb21pc2VzOkFycmF5PFByb21pc2U8dm9pZD4+ID0gW11cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGF0aDpzdHJpbmcgb2YgZmlsZVBhdGhzVG9SZW1vdmUpXG4gICAgICAgICAgICAgICAgaWYgKGF3YWl0IFRvb2xzLmlzRmlsZShwYXRoKSlcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZTpGdW5jdGlvbik6dm9pZCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS51bmxpbmsocGF0aCwgKGVycm9yOj9FcnJvcik6dm9pZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKVxuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICBwcm9taXNlcyA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHR5cGU6c3RyaW5nIG9mIFtcbiAgICAgICAgICAgICAgICAnamF2YVNjcmlwdCcsICdjYXNjYWRpbmdTdHlsZVNoZWV0J1xuICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTpGdW5jdGlvbiwgcmVqZWN0OkZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgTk9URTogV29ya2Fyb3VuZCBzaW5jZSBmbG93IG1pc3NlcyB0aGUgdGhyZWUgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgICAgIFwicmVhZGRpclwiIHNpZ25hdHVyZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICk6dm9pZCA9PiAoZmlsZVN5c3RlbS5yZWFkZGlyOkZ1bmN0aW9uKShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5hc3NldFt0eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5lbmNvZGluZyxcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yOj9FcnJvciwgZmlsZXM6QXJyYXk8c3RyaW5nPik6dm9pZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucm1kaXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXRbdHlwZV0sIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOj9FcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOnZvaWQgPT4gZXJyb3IgPyByZWplY3QoZXJyb3IpIDogcmVzb2x2ZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgICAgICAgICB9KSkpXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfSlcbiAgICB9fSlcbi8vIC8vLyBlbmRyZWdpb25cbi8vIC8vLyByZWdpb24gcmVtb3ZlIGNodW5rcyBpZiBhIGNvcnJlc3BvbmRpbmcgZGxsIHBhY2thZ2UgZXhpc3RzXG5pZiAoY29uZmlndXJhdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdICE9PSAnYnVpbGQ6ZGxsJylcbiAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZClcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsLm5vcm1hbGl6ZWQuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICBjaHVua05hbWVcbiAgICAgICAgKSkge1xuICAgICAgICAgICAgY29uc3QgbWFuaWZlc3RGaWxlUGF0aDpzdHJpbmcgPVxuICAgICAgICAgICAgICAgIGAke2NvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZX0vJHtjaHVua05hbWV9LmAgK1xuICAgICAgICAgICAgICAgIGBkbGwtbWFuaWZlc3QuanNvbmBcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLmRsbE1hbmlmZXN0RmlsZVBhdGhzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgIG1hbmlmZXN0RmlsZVBhdGhcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZFtjaHVua05hbWVdXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVBhdGg6c3RyaW5nID0gSGVscGVyLnJlbmRlckZpbGVQYXRoVGVtcGxhdGUoXG4gICAgICAgICAgICAgICAgICAgIEhlbHBlci5zdHJpcExvYWRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuY29tcG9zZS5qYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgICAgICksIHsnW25hbWVdJzogY2h1bmtOYW1lfSlcbiAgICAgICAgICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5BZGRBc3NldEhUTUxQbHVnaW4oe1xuICAgICAgICAgICAgICAgICAgICBmaWxlcGF0aDogZmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVTb3VyY2VtYXA6IFRvb2xzLmlzRmlsZVN5bmMoYCR7ZmlsZVBhdGh9Lm1hcGApXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suRGxsUmVmZXJlbmNlUGx1Z2luKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIG1hbmlmZXN0OiByZXF1aXJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFuaWZlc3RGaWxlUGF0aCl9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8vIHJlZ2lvbiBnZW5lcmF0ZSBjb21tb24gY2h1bmtzXG5pZiAoY29uZmlndXJhdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdICE9PSAnYnVpbGQ6ZGxsJylcbiAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgb2YgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uY29tbW9uQ2h1bmtJRHMpXG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgY2h1bmtOYW1lXG4gICAgICAgICkpXG4gICAgICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5vcHRpbWl6ZS5Db21tb25zQ2h1bmtQbHVnaW4oe1xuICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmphdmFTY3JpcHQpLFxuICAgICAgICAgICAgICAgIG1pbkNodW5rczogSW5maW5pdHksXG4gICAgICAgICAgICAgICAgbmFtZTogY2h1bmtOYW1lLFxuICAgICAgICAgICAgICAgIG1pblNpemU6IDBcbiAgICAgICAgICAgIH0pKVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8vIHJlZ2lvbiBtYXJrIGVtcHR5IGphdmFTY3JpcHQgbW9kdWxlcyBhcyBkdW1teVxuaWYgKCFjb25maWd1cmF0aW9uLm5lZWRlZC5qYXZhU2NyaXB0KVxuICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuY29tcG9zZS5qYXZhU2NyaXB0ID0gcGF0aC5yZXNvbHZlKFxuICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0LmphdmFTY3JpcHQsICcuX19kdW1teV9fLmNvbXBpbGVkLmpzJylcbi8vIC8vLyBlbmRyZWdpb25cbi8vIC8vLyByZWdpb24gZXh0cmFjdCBjYXNjYWRpbmcgc3R5bGUgc2hlZXRzXG5pZiAoY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmNhc2NhZGluZ1N0eWxlU2hlZXQpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHBsdWdpbnMuRXh0cmFjdFRleHQoe1xuICAgICAgICBhbGxDaHVua3M6IHRydWUsIGZpbGVuYW1lOiBwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmNhc2NhZGluZ1N0eWxlU2hlZXQpXG4gICAgfSkpXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIHBlcmZvcm1zIGltcGxpY2l0IGV4dGVybmFsIGxvZ2ljXG5pZiAoY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwubW9kdWxlcyA9PT0gJ19faW1wbGljaXRfXycpXG4gICAgLypcbiAgICAgICAgV2Ugb25seSB3YW50IHRvIHByb2Nlc3MgbW9kdWxlcyBmcm9tIGxvY2FsIGNvbnRleHQgaW4gbGlicmFyeSBtb2RlLFxuICAgICAgICBzaW5jZSBhIGNvbmNyZXRlIHByb2plY3QgdXNpbmcgdGhpcyBsaWJyYXJ5IHNob3VsZCBjb21iaW5lIGFsbCBhc3NldHNcbiAgICAgICAgKGFuZCBkZWR1cGxpY2F0ZSB0aGVtKSBmb3Igb3B0aW1hbCBidW5kbGluZyByZXN1bHRzLiBOT1RFOiBPbmx5IG5hdGl2ZVxuICAgICAgICBqYXZhU2NyaXB0IGFuZCBqc29uIG1vZHVsZXMgd2lsbCBiZSBtYXJrZWQgYXMgZXh0ZXJuYWwgZGVwZW5kZW5jeS5cbiAgICAqL1xuICAgIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLm1vZHVsZXMgPSAoXG4gICAgICAgIGNvbnRleHQ6c3RyaW5nLCByZXF1ZXN0OnN0cmluZywgY2FsbGJhY2s6UHJvY2VkdXJlRnVuY3Rpb25cbiAgICApOnZvaWQgPT4ge1xuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5yZXBsYWNlKC9eISsvLCAnJylcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhcnRzV2l0aCgnLycpKVxuICAgICAgICAgICAgcmVxdWVzdCA9IHBhdGgucmVsYXRpdmUoY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIHJlcXVlc3QpXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aDpzdHJpbmcgb2ZcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLmNvbmNhdChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmxvYWRlci5kaXJlY3RvcnlOYW1lcylcbiAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhcnRzV2l0aChmaWxlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zdWJzdHJpbmcoZmlsZVBhdGgubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXJ0c1dpdGgoJy8nKSlcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3Quc3Vic3RyaW5nKDEpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgbGV0IHJlc29sdmVkUmVxdWVzdDo/c3RyaW5nID0gSGVscGVyLmRldGVybWluZUV4dGVybmFsUmVxdWVzdChcbiAgICAgICAgICAgIHJlcXVlc3QsIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBjb250ZXh0LFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5pZ25vcmUuY29uY2F0KFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubG9hZGVyLmRpcmVjdG9yeU5hbWVzXG4gICAgICAgICAgICApLm1hcCgoZmlsZVBhdGg6c3RyaW5nKTpzdHJpbmcgPT4gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBmaWxlUGF0aFxuICAgICAgICAgICAgKSkuZmlsdGVyKChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT5cbiAgICAgICAgICAgICAgICAhY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQuc3RhcnRzV2l0aChmaWxlUGF0aClcbiAgICAgICAgICAgICksIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmFsaWFzZXMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMubm9ybWFsLCBjb25maWd1cmF0aW9uLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmJhc2UsIGNvbmZpZ3VyYXRpb24ucGF0aC5pZ25vcmUsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5kaXJlY3RvcnlOYW1lcyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLnByb3BlcnR5TmFtZXMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhY2thZ2UuYWxpYXNQcm9wZXJ0eU5hbWVzLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwuaW1wbGljaXQucGF0dGVybi5pbmNsdWRlLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwuaW1wbGljaXQucGF0dGVybi5leGNsdWRlLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pblBsYWNlLmV4dGVybmFsTGlicmFyeS5ub3JtYWwsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmluUGxhY2UuZXh0ZXJuYWxMaWJyYXJ5LmR5bmFtaWMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmVuY29kaW5nKVxuICAgICAgICBpZiAocmVzb2x2ZWRSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAoWyd2YXInLCAndW1kJ10uaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuZXh0ZXJuYWxcbiAgICAgICAgICAgICkgJiYgcmVxdWVzdCBpbiBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbC5hbGlhc2VzKVxuICAgICAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdCA9IGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLmFsaWFzZXNbXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RdXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuZXh0ZXJuYWwgPT09ICd2YXInKVxuICAgICAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdCA9IFRvb2xzLnN0cmluZ0NvbnZlcnRUb1ZhbGlkVmFyaWFibGVOYW1lKFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFJlcXVlc3QsICcwLTlhLXpBLVpfJFxcXFwuJylcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhcbiAgICAgICAgICAgICAgICBudWxsLCByZXNvbHZlZFJlcXVlc3QsIGNvbmZpZ3VyYXRpb24uZXhwb3J0Rm9ybWF0LmV4dGVybmFsKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgfVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8vIHJlZ2lvbiBidWlsZCBkbGwgcGFja2FnZXNcbmlmIChjb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl0gPT09ICdidWlsZDpkbGwnKSB7XG4gICAgbGV0IGRsbENodW5rSURFeGlzdHM6Ym9vbGVhbiA9IGZhbHNlXG4gICAgZm9yIChjb25zdCBjaHVua05hbWU6c3RyaW5nIGluIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsLm5vcm1hbGl6ZWQpXG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgY2h1bmtOYW1lXG4gICAgICAgICkpXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZGxsQ2h1bmtJRHMuaW5jbHVkZXMoY2h1bmtOYW1lKSlcbiAgICAgICAgICAgICAgICBkbGxDaHVua0lERXhpc3RzID0gdHJ1ZVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkW2NodW5rTmFtZV1cbiAgICBpZiAoZGxsQ2h1bmtJREV4aXN0cykge1xuICAgICAgICBsaWJyYXJ5TmFtZSA9ICdbbmFtZV1ETExQYWNrYWdlJ1xuICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5EbGxQbHVnaW4oe1xuICAgICAgICAgICAgcGF0aDogYCR7Y29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlfS9bbmFtZV0uZGxsLW1hbmlmZXN0Lmpzb25gLFxuICAgICAgICAgICAgbmFtZTogbGlicmFyeU5hbWVcbiAgICAgICAgfSkpXG4gICAgfSBlbHNlXG4gICAgICAgIGNvbnNvbGUud2FybignTm8gZGxsIGNodW5rIGlkIGZvdW5kLicpXG59XG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBhcHBseSBmaW5hbCBkb20vamF2YVNjcmlwdCBtb2RpZmljYXRpb25zL2ZpeGVzXG5wbHVnaW5JbnN0YW5jZXMucHVzaCh7YXBwbHk6IChjb21waWxlcjpPYmplY3QpOnZvaWQgPT4gY29tcGlsZXIucGx1Z2luKFxuICAgICdjb21waWxhdGlvbicsIChjb21waWxhdGlvbjpPYmplY3QpOnZvaWQgPT4ge1xuICAgICAgICBjb21waWxhdGlvbi5wbHVnaW4oJ2h0bWwtd2VicGFjay1wbHVnaW4tYWx0ZXItYXNzZXQtdGFncycsIChcbiAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhOlBsYWluT2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICAgICApOnZvaWQgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0YWdzOkFycmF5PFBsYWluT2JqZWN0PiBvZiBbXG4gICAgICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGEuYm9keSwgaHRtbFBsdWdpbkRhdGEuaGVhZFxuICAgICAgICAgICAgXSkge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleDpudW1iZXIgPSAwXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWc6UGxhaW5PYmplY3Qgb2YgdGFncykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXC5fX2R1bW15X18oXFwuLiopPyQvLnRlc3QocGF0aC5iYXNlbmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5hdHRyaWJ1dGVzLnNyYyB8fCB0YWcuYXR0cmlidXRlcy5ocmVmIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgICkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhc3NldHM6QXJyYXk8c3RyaW5nPiA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGEucGx1Z2luLmFzc2V0SnNvbilcbiAgICAgICAgICAgIGxldCBpbmRleDpudW1iZXIgPSAwXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFzc2V0UmVxdWVzdDpzdHJpbmcgb2YgYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKC9eXFwuX19kdW1teV9fKFxcLi4qKT8kLy50ZXN0KHBhdGguYmFzZW5hbWUoYXNzZXRSZXF1ZXN0KSkpXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgaW5kZXggKz0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGEucGx1Z2luLmFzc2V0SnNvbiA9IEpTT04uc3RyaW5naWZ5KGFzc2V0cylcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGh0bWxQbHVnaW5EYXRhKVxuICAgICAgICB9KVxuICAgICAgICBjb21waWxhdGlvbi5wbHVnaW4oJ2h0bWwtd2VicGFjay1wbHVnaW4tYWZ0ZXItaHRtbC1wcm9jZXNzaW5nJywgKFxuICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGE6UGxhaW5PYmplY3QsIGNhbGxiYWNrOlByb2NlZHVyZUZ1bmN0aW9uXG4gICAgICAgICk6V2luZG93ID0+IHtcbiAgICAgICAgICAgIGxldCB3aW5kb3c6V2luZG93XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdpbmRvdyA9IChuZXcgRE9NKGh0bWxQbHVnaW5EYXRhLmh0bWwucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgLzwlL2csICcjIysjKyMrIyMnXG4gICAgICAgICAgICAgICAgKS5yZXBsYWNlKC8lPi9nLCAnIyMtIy0jLSMjJykpKS53aW5kb3dcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yLCBodG1sUGx1Z2luRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxpbmthYmxlczp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0OiAnc3JjJywgbGluazogJ2hyZWYnfVxuICAgICAgICAgICAgZm9yIChjb25zdCB0YWdOYW1lOnN0cmluZyBpbiBsaW5rYWJsZXMpXG4gICAgICAgICAgICAgICAgaWYgKGxpbmthYmxlcy5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbU5vZGU6RG9tTm9kZSBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGFnTmFtZX1bJHtsaW5rYWJsZXNbdGFnTmFtZV19Kj1cIj9gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtjb25maWd1cmF0aW9uLmhhc2hBbGdvcml0aG19PVwiXWApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTk9URTogUmVtb3Zpbmcgc3ltYm9scyBhZnRlciBhIFwiJlwiIGluIGhhc2ggc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbmVjZXNzYXJ5IHRvIG1hdGNoIHRoZSBnZW5lcmF0ZWQgcmVxdWVzdCBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gb2ZmbGluZSBwbHVnaW4uXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tTm9kZS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FibGVzW3RhZ05hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbU5vZGUuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWJsZXNbdGFnTmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnJlcGxhY2UobmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYChcXFxcPyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT1gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1teJl0rKS4qJCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLCAnJDEnKSlcbiAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLmh0bWwgPSBodG1sUGx1Z2luRGF0YS5odG1sLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgL14oXFxzKjwhZG9jdHlwZSBbXj5dKz8+XFxzKilbXFxzXFxTXSokL2ksICckMSdcbiAgICAgICAgICAgICkgKyB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvIyNcXCsjXFwrI1xcKyMjL2csICc8JSdcbiAgICAgICAgICAgICAgICApLnJlcGxhY2UoLyMjLSMtIy0jIy9nLCAnJT4nKVxuICAgICAgICAgICAgLy8gIHJlZ2lvbiBwb3N0IGNvbXBpbGF0aW9uXG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxGaWxlU3BlY2lmaWNhdGlvbjpQbGFpbk9iamVjdCBvZlxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgaHRtbEZpbGVTcGVjaWZpY2F0aW9uLmZpbGVuYW1lID09PVxuICAgICAgICAgICAgICAgICAgICBodG1sUGx1Z2luRGF0YS5wbHVnaW4ub3B0aW9ucy5maWxlbmFtZVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9hZGVyQ29uZmlndXJhdGlvbjpQbGFpbk9iamVjdCBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEZpbGVTcGVjaWZpY2F0aW9uLnRlbXBsYXRlLnVzZVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbi5oYXNPd25Qcm9wZXJ0eSgnb3B0aW9ucycpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbi5vcHRpb25zLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29tcGlsZVN0ZXBzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgbG9hZGVyQ29uZmlndXJhdGlvbi5vcHRpb25zLmNvbXBpbGVTdGVwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sUGx1Z2luRGF0YS5odG1sID0gZWpzTG9hZGVyLmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCB7fSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogbG9hZGVyQ29uZmlndXJhdGlvbi5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxlU3RlcHM6IGh0bWxGaWxlU3BlY2lmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZW1wbGF0ZS5wb3N0Q29tcGlsZVN0ZXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19KSkoaHRtbFBsdWdpbkRhdGEuaHRtbClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbmRyZWdpb25cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGh0bWxQbHVnaW5EYXRhKVxuICAgICAgICB9KVxuICAgIH0pfSlcbi8qXG4gICAgTk9URTogVGhlIHVtZCBtb2R1bGUgZXhwb3J0IGRvZXNuJ3QgaGFuZGxlIGNhc2VzIHdoZXJlIHRoZSBwYWNrYWdlIG5hbWVcbiAgICBkb2Vzbid0IG1hdGNoIGV4cG9ydGVkIGxpYnJhcnkgbmFtZS4gVGhpcyBwb3N0IHByb2Nlc3NpbmcgZml4ZXMgdGhpcyBpc3N1ZS5cbiovXG5pZiAoY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuZXh0ZXJuYWwuc3RhcnRzV2l0aCgndW1kJykpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2goe2FwcGx5OiAoY29tcGlsZXI6T2JqZWN0KTp2b2lkID0+IGNvbXBpbGVyLnBsdWdpbihcbiAgICAgICAgJ2VtaXQnLCAoY29tcGlsYXRpb246T2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvbik6dm9pZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBidW5kbGVOYW1lOnN0cmluZyA9IChcbiAgICAgICAgICAgICAgICB0eXBlb2YgbGlicmFyeU5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICApID8gbGlicmFyeU5hbWUgOiBsaWJyYXJ5TmFtZVswXVxuICAgICAgICAgICAgZm9yIChjb25zdCBhc3NldFJlcXVlc3Q6c3RyaW5nIGluIGNvbXBpbGF0aW9uLmFzc2V0cylcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLmFzc2V0cy5oYXNPd25Qcm9wZXJ0eShhc3NldFJlcXVlc3QpICYmXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0UmVxdWVzdC5yZXBsYWNlKC8oW14/XSspXFw/LiokLywgJyQxJykuZW5kc1dpdGgoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzLmphdmFTY3JpcHQub3V0cHV0RXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNvdXJjZTpzdHJpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsYXRpb24uYXNzZXRzW2Fzc2V0UmVxdWVzdF0uc291cmNlKClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50OnN0cmluZyBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLmFsaWFzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwuYWxpYXNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGFzT3duUHJvcGVydHkocmVwbGFjZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZShuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhyZXF1aXJlXFxcXCgpXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xzLnN0cmluZ0VzY2FwZVJlZ3VsYXJFeHByZXNzaW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWxpYXNlc1tyZXBsYWNlbWVudF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgKyAnXCIoXFxcXCkpJywgJ2cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksIGAkMScke3JlcGxhY2VtZW50fSckMmApLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKCcoZGVmaW5lXFxcXChcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xzLnN0cmluZ0VzY2FwZVJlZ3VsYXJFeHByZXNzaW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVuZGxlTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgKyAnXCIsIFxcXFxbLiopXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb29scy5zdHJpbmdFc2NhcGVSZWd1bGFyRXhwcmVzc2lvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWxpYXNlc1tyZXBsYWNlbWVudF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsgJ1wiKC4qXFxcXF0sIGZhY3RvcnlcXFxcKTspJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwgYCQxJyR7cmVwbGFjZW1lbnR9JyQyYClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhyb290XFxcXFspXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb29scy5zdHJpbmdFc2NhcGVSZWd1bGFyRXhwcmVzc2lvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bmRsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsgJ1wiKFxcXFxdID0gKSdcbiAgICAgICAgICAgICAgICAgICAgICAgICksIGAkMSdgICsgVG9vbHMuc3RyaW5nQ29udmVydFRvVmFsaWRWYXJpYWJsZU5hbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVuZGxlTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgKSArIGAnJDJgKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsYXRpb24uYXNzZXRzW2Fzc2V0UmVxdWVzdF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBXZWJwYWNrUmF3U291cmNlKHNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfSl9KVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gYWRkIGF1dG9tYXRpYyBpbWFnZSBjb21wcmVzc2lvblxuLy8gTk9URTogVGhpcyBwbHVnaW4gc2hvdWxkIGJlIGxvYWRlZCBhdCBsYXN0IHRvIGVuc3VyZSB0aGF0IGFsbCBlbWl0dGVkIGltYWdlc1xuLy8gcmFuIHRocm91Z2guXG5wbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5JbWFnZW1pbihcbiAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuaW1hZ2UuY29udGVudCkpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBjb250ZXh0IHJlcGxhY2VtZW50c1xuZm9yIChcbiAgICBjb25zdCBjb250ZXh0UmVwbGFjZW1lbnQ6QXJyYXk8c3RyaW5nPiBvZlxuICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5jb250ZXh0XG4pXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suQ29udGV4dFJlcGxhY2VtZW50UGx1Z2luKFxuICAgICAgICAuLi5jb250ZXh0UmVwbGFjZW1lbnQubWFwKCh2YWx1ZTpzdHJpbmcpOmFueSA9PiAobmV3IEZ1bmN0aW9uKFxuICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nLCAnX19kaXJuYW1lJywgJ19fZmlsZW5hbWUnLCBgcmV0dXJuICR7dmFsdWV9YFxuICAgICAgICAvLyBJZ25vcmVUeXBlQ2hlY2tcbiAgICAgICAgKSkoY29uZmlndXJhdGlvbiwgX19kaXJuYW1lLCBfX2ZpbGVuYW1lKSkpKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvIGVuZHJlZ2lvblxuLy8gLyByZWdpb24gbG9hZGVyIGhlbHBlclxuY29uc3QgcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llczpGdW5jdGlvbiA9IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4ge1xuICAgIGZpbGVQYXRoID0gSGVscGVyLnN0cmlwTG9hZGVyKGZpbGVQYXRoKVxuICAgIHJldHVybiBIZWxwZXIuaXNGaWxlUGF0aEluTG9jYXRpb24oXG4gICAgICAgIGZpbGVQYXRoLCBjb25maWd1cmF0aW9uLnBhdGguaWdub3JlLmNvbmNhdChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5sb2FkZXIuZGlyZWN0b3J5TmFtZXNcbiAgICAgICAgKS5tYXAoKGZpbGVQYXRoOnN0cmluZyk6c3RyaW5nID0+IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBmaWxlUGF0aClcbiAgICAgICAgKS5maWx0ZXIoKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgIWNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LnN0YXJ0c1dpdGgoZmlsZVBhdGgpKSlcbn1cbmNvbnN0IGxvYWRlcjpPYmplY3QgPSB7fVxuY29uc3QgZXZhbHVhdGU6RnVuY3Rpb24gPSAoY29kZTpzdHJpbmcsIGZpbGVQYXRoOnN0cmluZyk6YW55ID0+IChuZXcgRnVuY3Rpb24oXG4gICAgJ2NvbmZpZ3VyYXRpb24nLCAnZmlsZVBhdGgnLCAnbG9hZGVyJywgJ3JlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMnLFxuICAgIGByZXR1cm4gJHtjb2RlfWBcbi8vIElnbm9yZVR5cGVDaGVja1xuKSkoY29uZmlndXJhdGlvbiwgZmlsZVBhdGgsIGxvYWRlciwgcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llcylcblRvb2xzLmV4dGVuZE9iamVjdChsb2FkZXIsIHtcbiAgICAvLyBDb252ZXJ0IHRvIGNvbXBhdGlibGUgbmF0aXZlIHdlYiB0eXBlcy5cbiAgICAvLyByZWdpb24gZ2VuZXJpYyB0ZW1wbGF0ZVxuICAgIGVqczoge1xuICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+IEhlbHBlci5ub3JtYWxpemVQYXRocyhcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbC5jb25jYXQoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTFxuICAgICAgICAgICAgKS5tYXAoKGh0bWxDb25maWd1cmF0aW9uOkhUTUxDb25maWd1cmF0aW9uKTpzdHJpbmcgPT5cbiAgICAgICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aClcbiAgICAgICAgKS5pbmNsdWRlcyhmaWxlUGF0aCkgfHxcbiAgICAgICAgICAgICgoY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmVqcy5leGNsdWRlID09PSBudWxsKSA/IGZhbHNlIDpcbiAgICAgICAgICAgICAgICBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmVqcy5leGNsdWRlLCBmaWxlUGF0aCkpLFxuICAgICAgICBpbmNsdWRlOiBIZWxwZXIubm9ybWFsaXplUGF0aHMoW1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5iYXNlXG4gICAgICAgIF0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLmxvY2F0aW9ucy5kaXJlY3RvcnlQYXRocykpLFxuICAgICAgICB0ZXN0OiAvXig/IS4rXFwuaHRtbFxcLmVqcyQpLitcXC5lanMkL2ksXG4gICAgICAgIHVzZTogW1xuICAgICAgICAgICAge2xvYWRlcjogJ2ZpbGU/bmFtZT1bcGF0aF1bbmFtZV0nICsgKEJvb2xlYW4oXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmVqcy5vcHRpb25zLmNvbXBpbGVTdGVwcyAlIDJcbiAgICAgICAgICAgICkgPyAnLmpzJyA6ICcnKSArIGA/JHtjb25maWd1cmF0aW9uLmhhc2hBbGdvcml0aG19PVtoYXNoXWB9LFxuICAgICAgICAgICAge2xvYWRlcjogJ2V4dHJhY3QnfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5lanMubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5lanMub3B0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICBdLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuZWpzLmFkZGl0aW9uYWwubWFwKFxuICAgICAgICAgICAgZXZhbHVhdGUpKVxuICAgIH0sXG4gICAgLy8gZW5kcmVnaW9uXG4gICAgLy8gcmVnaW9uIHNjcmlwdFxuICAgIHNjcmlwdDoge1xuICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+IChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0LmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgKSA/IHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMoZmlsZVBhdGgpIDpcbiAgICAgICAgICAgIGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0LmV4Y2x1ZGUsIGZpbGVQYXRoXG4gICAgICAgICAgICApLFxuICAgICAgICBpbmNsdWRlOiBIZWxwZXIubm9ybWFsaXplUGF0aHMoW1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5qYXZhU2NyaXB0XG4gICAgICAgIF0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLmxvY2F0aW9ucy5kaXJlY3RvcnlQYXRocykpLFxuICAgICAgICB0ZXN0OiAvXFwuanMoPzpcXD8uKik/JC9pLFxuICAgICAgICB1c2U6IFt7XG4gICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgLmxvYWRlcixcbiAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgLm9wdGlvbnNcbiAgICAgICAgfV0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0LmFkZGl0aW9uYWwubWFwKFxuICAgICAgICAgICAgZXZhbHVhdGUpKVxuICAgIH0sXG4gICAgLy8gZW5kcmVnaW9uXG4gICAgLy8gcmVnaW9uIGh0bWwgdGVtcGxhdGVcbiAgICBodG1sOiB7XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgb25seSBmb3IgdGhlIG1haW4gZW50cnkgdGVtcGxhdGUuXG4gICAgICAgIG1haW46IHtcbiAgICAgICAgICAgIHRlc3Q6IG5ldyBSZWdFeHAoJ14nICsgVG9vbHMuc3RyaW5nRXNjYXBlUmVndWxhckV4cHJlc3Npb25zKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUwudGVtcGxhdGUuZmlsZVBhdGhcbiAgICAgICAgICAgICkgKyAnKD86XFxcXD8uKik/JCcpLFxuICAgICAgICAgICAgdXNlOiBjb25maWd1cmF0aW9uLmZpbGVzLmRlZmF1bHRIVE1MLnRlbXBsYXRlLnVzZVxuICAgICAgICB9LFxuICAgICAgICBlanM6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gSGVscGVyLm5vcm1hbGl6ZVBhdGhzKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbC5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUxcbiAgICAgICAgICAgICAgICApLm1hcCgoaHRtbENvbmZpZ3VyYXRpb246SFRNTENvbmZpZ3VyYXRpb24pOnN0cmluZyA9PlxuICAgICAgICAgICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aClcbiAgICAgICAgICAgICkuaW5jbHVkZXMoZmlsZVBhdGgpIHx8XG4gICAgICAgICAgICAgICAgKChjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5leGNsdWRlID09PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgICAgIGZhbHNlIDogZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5leGNsdWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGgpKSxcbiAgICAgICAgICAgIGluY2x1ZGU6IGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQudGVtcGxhdGUsXG4gICAgICAgICAgICB0ZXN0OiAvXFwuaHRtbFxcLmVqcyg/OlxcPy4qKT8kL2ksXG4gICAgICAgICAgICB1c2U6IFtcbiAgICAgICAgICAgICAgICB7bG9hZGVyOiAnZmlsZT9uYW1lPScgKyBwYXRoLmpvaW4ocGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5hc3NldC5iYXNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0LnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgKSwgJ1tuYW1lXScgKyAoQm9vbGVhbihcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmh0bWwub3B0aW9ucy5jb21waWxlU3RlcHNcbiAgICAgICAgICAgICAgICAgICAgJSAyXG4gICAgICAgICAgICAgICAgKSA/ICcuanMnIDogJycpICsgYD8ke2NvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobX09W2hhc2hdYCl9XG4gICAgICAgICAgICBdLmNvbmNhdCgoQm9vbGVhbihcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5vcHRpb25zLmNvbXBpbGVTdGVwcyAlIDJcbiAgICAgICAgICAgICkgPyBbXSA6XG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICB7bG9hZGVyOiAnZXh0cmFjdCd9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwubG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUuaHRtbC5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLCB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmh0bWwub3B0aW9uc1xuICAgICAgICAgICAgfSkuY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5odG1sLmFkZGl0aW9uYWwubWFwKFxuICAgICAgICAgICAgICAgIGV2YWx1YXRlKSlcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbDoge1xuICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiBIZWxwZXIubm9ybWFsaXplUGF0aHMoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5odG1sLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTFxuICAgICAgICAgICAgICAgICkubWFwKChodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbik6c3RyaW5nID0+XG4gICAgICAgICAgICAgICAgICAgIGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLmZpbGVQYXRoKVxuICAgICAgICAgICAgKS5pbmNsdWRlcyhmaWxlUGF0aCkgfHxcbiAgICAgICAgICAgICAgICAoKGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwuZXhjbHVkZSA9PT0gbnVsbCkgPyB0cnVlIDpcbiAgICAgICAgICAgICAgICAgICAgZXZhbHVhdGUoY29uZmlndXJhdGlvbi5tb2R1bGUuaHRtbC5leGNsdWRlLCBmaWxlUGF0aCkpLFxuICAgICAgICAgICAgaW5jbHVkZTogY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC50ZW1wbGF0ZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5odG1sKD86XFw/LiopPyQvaSxcbiAgICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgICAgIHtsb2FkZXI6ICdmaWxlP25hbWU9JyArIHBhdGguam9pbihwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXQudGVtcGxhdGVcbiAgICAgICAgICAgICAgICApLCBgW25hbWVdLltleHRdPyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT1baGFzaF1gKX0sXG4gICAgICAgICAgICAgICAge2xvYWRlcjogJ2V4dHJhY3QnfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUuaHRtbC5sb2FkZXIsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwub3B0aW9uc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwuYWRkaXRpb25hbC5tYXAoZXZhbHVhdGUpKVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyBMb2FkIGRlcGVuZGVuY2llcy5cbiAgICAvLyByZWdpb24gc3R5bGVcbiAgICBzdHlsZToge1xuICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+IChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmNhc2NhZGluZ1N0eWxlU2hlZXQuZXhjbHVkZSA9PT0gbnVsbFxuICAgICAgICApID8gcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llcyhmaWxlUGF0aCkgOlxuICAgICAgICAgICAgZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUuY2FzY2FkaW5nU3R5bGVTaGVldC5leGNsdWRlLCBmaWxlUGF0aCksXG4gICAgICAgIGluY2x1ZGU6IEhlbHBlci5ub3JtYWxpemVQYXRocyhbXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmNhc2NhZGluZ1N0eWxlU2hlZXRcbiAgICAgICAgXS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUubG9jYXRpb25zLmRpcmVjdG9yeVBhdGhzKSksXG4gICAgICAgIHRlc3Q6IC9cXC5zP2Nzcyg/OlxcPy4qKT8kL2ksXG4gICAgICAgIHVzZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUuc3R5bGUubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnN0eWxlLm9wdGlvbnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0LmxvYWRlcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0Lm9wdGlvbnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuY2FzY2FkaW5nU3R5bGVTaGVldFxuICAgICAgICAgICAgICAgICAgICAubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkZW50OiAncG9zdGNzcycsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6ICgpOkFycmF5PE9iamVjdD4gPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc0ltcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVwZW5kZW5jeVRvOiB3ZWJwYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rjc3NDU1NuZXh0KHticm93c2VyczogJz4gMCUnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PVEU6IENoZWNraW5nIHBhdGggZG9lc24ndCB3b3JrIGlmIGZvbnRzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZWQgaW4gbGlicmFyaWVzIHByb3ZpZGVkIGluIGFub3RoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiB0aGFuIHRoZSBwcm9qZWN0IGl0c2VsZiBsaWtlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm9kZV9tb2R1bGVzXCIgZm9sZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rjc3NGb250UGF0aCh7Y2hlY2tQYXRoOiBmYWxzZX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc1VSTCh7dXJsOiAncmViYXNlJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc1Nwcml0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5OiAoKTpQcm9taXNlPG51bGw+ID0+IG5ldyBQcm9taXNlKChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTpGdW5jdGlvbiwgcmVqZWN0OkZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTpQcm9taXNlPG51bGw+ID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmltYWdlID8gcmVzb2x2ZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9va3M6IHtvblNhdmVTcHJpdGVzaGVldDogKGltYWdlOk9iamVjdCk6c3RyaW5nID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguam9pbihpbWFnZS5zcHJpdGVQYXRoLCBwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5hc3NldC5pbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuY29tcG9zZS5pbWFnZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNoZWV0UGF0aDogY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FzY2FkaW5nU3R5bGVTaGVldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGVQYXRoOiBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuY2FzY2FkaW5nU3R5bGVTaGVldC5vcHRpb25zKVxuICAgICAgICAgICAgfVxuICAgICAgICBdLmNvbmNhdChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5jYXNjYWRpbmdTdHlsZVNoZWV0LmFkZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAubWFwKGV2YWx1YXRlKSlcbiAgICB9LFxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIE9wdGltaXplIGxvYWRlZCBhc3NldHMuXG4gICAgLy8gcmVnaW9uIGZvbnRcbiAgICBmb250OiB7XG4gICAgICAgIGVvdDoge1xuICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiAoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuZW90LmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgICAgICkgPyBmYWxzZSA6XG4gICAgICAgICAgICAgICAgZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LmVvdC5leGNsdWRlLCBmaWxlUGF0aCksXG4gICAgICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguYmFzZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5lb3QoPzpcXD8uKik/JC9pLFxuICAgICAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuZW90LmxvYWRlcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5lb3Qub3B0aW9uc1xuICAgICAgICAgICAgfV0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LmVvdC5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH0sXG4gICAgICAgIHN2Zzoge1xuICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiAoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuc3ZnLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgICAgICkgPyBmYWxzZSA6XG4gICAgICAgICAgICAgICAgZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnN2Zy5leGNsdWRlLCBmaWxlUGF0aCksXG4gICAgICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguYmFzZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5zdmcoPzpcXD8uKik/JC9pLFxuICAgICAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuc3ZnLmxvYWRlcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5zdmcub3B0aW9uc1xuICAgICAgICAgICAgfV0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnN2Zy5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH0sXG4gICAgICAgIHR0Zjoge1xuICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiAoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQudHRmLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgICAgICkgPyBmYWxzZSA6XG4gICAgICAgICAgICAgICAgZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnR0Zi5leGNsdWRlLCBmaWxlUGF0aCksXG4gICAgICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguYmFzZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC50dGYoPzpcXD8uKik/JC9pLFxuICAgICAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQudHRmLmxvYWRlcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC50dGYub3B0aW9uc1xuICAgICAgICAgICAgfV0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnR0Zi5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH0sXG4gICAgICAgIHdvZmY6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LndvZmYuZXhjbHVkZSA9PT0gbnVsbFxuICAgICAgICAgICAgKSA/IGZhbHNlIDpcbiAgICAgICAgICAgICAgICBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5leGNsdWRlLCBmaWxlUGF0aFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguYmFzZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC53b2ZmMj8oPzpcXD8uKik/JC9pLFxuICAgICAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5vcHRpb25zXG4gICAgICAgICAgICB9XS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBpbWFnZVxuICAgIGltYWdlOiB7XG4gICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmltYWdlLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgKSA/IHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMoZmlsZVBhdGgpIDpcbiAgICAgICAgICAgIGV2YWx1YXRlKGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5pbWFnZS5leGNsdWRlLCBmaWxlUGF0aCksXG4gICAgICAgIGluY2x1ZGU6IGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuaW1hZ2UsXG4gICAgICAgIHRlc3Q6IC9cXC4oPzpwbmd8anBnfGljb3xnaWYpKD86XFw/LiopPyQvaSxcbiAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuaW1hZ2UubG9hZGVyLFxuICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmltYWdlLmZpbGVcbiAgICAgICAgfV0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5pbWFnZS5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgIGV2YWx1YXRlKSlcbiAgICB9LFxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBkYXRhXG4gICAgZGF0YToge1xuICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmV4dGVuc2lvbnMuZmlsZS5pbnRlcm5hbC5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICBwYXRoLmV4dG5hbWUoSGVscGVyLnN0cmlwTG9hZGVyKGZpbGVQYXRoKSlcbiAgICAgICAgICAgICkgfHwgKChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZGF0YS5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llcyhmaWxlUGF0aCkgOlxuICAgICAgICAgICAgICAgIGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZGF0YS5leGNsdWRlLCBmaWxlUGF0aCkpLFxuICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmRhdGEsXG4gICAgICAgIHRlc3Q6IC8uKy8sXG4gICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEubG9hZGVyLFxuICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEub3B0aW9uc1xuICAgICAgICB9XS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEuYWRkaXRpb25hbC5tYXAoZXZhbHVhdGUpKVxuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cbn0pXG5pZiAoY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmNhc2NhZGluZ1N0eWxlU2hlZXQpIHtcbiAgICBsb2FkZXIuc3R5bGUudXNlLnNoaWZ0KClcbiAgICBsb2FkZXIuc3R5bGUudXNlID0gcGx1Z2lucy5FeHRyYWN0VGV4dC5leHRyYWN0KHt1c2U6IGxvYWRlci5zdHlsZS51c2V9KVxufVxuLy8gLyBlbmRyZWdpb25cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGNvbmZpZ3VyYXRpb25cbmNvbnN0IHdlYnBhY2tDb25maWd1cmF0aW9uOldlYnBhY2tDb25maWd1cmF0aW9uID0ge1xuICAgIGJhaWw6IHRydWUsXG4gICAgY2FjaGU6IGNvbmZpZ3VyYXRpb24uY2FjaGUubWFpbixcbiAgICBjb250ZXh0OiBjb25maWd1cmF0aW9uLnBhdGguY29udGV4dCxcbiAgICBkZXZ0b29sOiBjb25maWd1cmF0aW9uLmRldmVsb3BtZW50LnRvb2wsXG4gICAgZGV2U2VydmVyOiBjb25maWd1cmF0aW9uLmRldmVsb3BtZW50LnNlcnZlcixcbiAgICAvLyByZWdpb24gaW5wdXRcbiAgICBlbnRyeTogY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZCxcbiAgICBleHRlcm5hbHM6IGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLm1vZHVsZXMsXG4gICAgcmVzb2x2ZToge1xuICAgICAgICBhbGlhczogY29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcyxcbiAgICAgICAgYWxpYXNGaWVsZHM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5hbGlhc1Byb3BlcnR5TmFtZXMsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZ3VyYXRpb24uZXh0ZW5zaW9ucy5maWxlLmludGVybmFsLFxuICAgICAgICBtYWluRmllbGRzOiBjb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5wcm9wZXJ0eU5hbWVzLFxuICAgICAgICBtYWluRmlsZXM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgbW9kdWxlRXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5leHRlbnNpb25zLm1vZHVsZSxcbiAgICAgICAgbW9kdWxlczogSGVscGVyLm5vcm1hbGl6ZVBhdGhzKGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzKSxcbiAgICAgICAgdW5zYWZlQ2FjaGU6IGNvbmZpZ3VyYXRpb24uY2FjaGUudW5zYWZlXG4gICAgfSxcbiAgICByZXNvbHZlTG9hZGVyOiB7XG4gICAgICAgIGFsaWFzOiBjb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzLFxuICAgICAgICBhbGlhc0ZpZWxkczogY29uZmlndXJhdGlvbi5wYWNrYWdlLmFsaWFzUHJvcGVydHlOYW1lcyxcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5sb2FkZXIuZXh0ZW5zaW9ucy5maWxlLFxuICAgICAgICBtYWluRmllbGRzOiBjb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5wcm9wZXJ0eU5hbWVzLFxuICAgICAgICBtYWluRmlsZXM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgbW9kdWxlRXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5sb2FkZXIuZXh0ZW5zaW9ucy5tb2R1bGUsXG4gICAgICAgIG1vZHVsZXM6IGNvbmZpZ3VyYXRpb24ubG9hZGVyLmRpcmVjdG9yeU5hbWVzXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gb3V0cHV0XG4gICAgb3V0cHV0OiB7XG4gICAgICAgIGZpbGVuYW1lOiBwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmphdmFTY3JpcHQpLFxuICAgICAgICBoYXNoRnVuY3Rpb246IGNvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobSxcbiAgICAgICAgbGlicmFyeTogbGlicmFyeU5hbWUsXG4gICAgICAgIGxpYnJhcnlUYXJnZXQ6IChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSA9PT0gJ2J1aWxkOmRsbCdcbiAgICAgICAgKSA/ICd2YXInIDogY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuc2VsZixcbiAgICAgICAgcGF0aDogY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICBwdWJsaWNQYXRoOiBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LnB1YmxpYyxcbiAgICAgICAgcGF0aGluZm86IGNvbmZpZ3VyYXRpb24uZGVidWcsXG4gICAgICAgIHVtZE5hbWVkRGVmaW5lOiB0cnVlXG4gICAgfSxcbiAgICBwZXJmb3JtYW5jZTogY29uZmlndXJhdGlvbi5wZXJmb3JtYW5jZUhpbnRzLFxuICAgIHRhcmdldDogY29uZmlndXJhdGlvbi50YXJnZXRUZWNobm9sb2d5LFxuICAgIC8vIGVuZHJlZ2lvblxuICAgIG1vZHVsZToge1xuICAgICAgICBydWxlczogY29uZmlndXJhdGlvbi5tb2R1bGUuYWRkaXRpb25hbC5tYXAoKFxuICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbjpQbGFpbk9iamVjdFxuICAgICAgICApOlBsYWluT2JqZWN0ID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbi5leGNsdWRlIHx8ICdmYWxzZScsIGZpbGVQYXRoKSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlOiBsb2FkZXJDb25maWd1cmF0aW9uLmluY2x1ZGUgJiYgZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlckNvbmZpZ3VyYXRpb24uaW5jbHVkZSwgY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHRcbiAgICAgICAgICAgICAgICApIHx8IGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYmFzZSxcbiAgICAgICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgICAgICBsb2FkZXJDb25maWd1cmF0aW9uLnRlc3QsIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0KSksXG4gICAgICAgICAgICAgICAgdXNlOiBldmFsdWF0ZShsb2FkZXJDb25maWd1cmF0aW9uLnVzZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY29uY2F0KFtcbiAgICAgICAgICAgIGxvYWRlci5lanMsXG4gICAgICAgICAgICBsb2FkZXIuc2NyaXB0LFxuICAgICAgICAgICAgbG9hZGVyLmh0bWwubWFpbiwgbG9hZGVyLmh0bWwuZWpzLCBsb2FkZXIuaHRtbC5odG1sLFxuICAgICAgICAgICAgbG9hZGVyLnN0eWxlLFxuICAgICAgICAgICAgbG9hZGVyLmZvbnQuZW90LCBsb2FkZXIuZm9udC5zdmcsIGxvYWRlci5mb250LnR0ZixcbiAgICAgICAgICAgIGxvYWRlci5mb250LndvZmYsXG4gICAgICAgICAgICBsb2FkZXIuaW1hZ2UsXG4gICAgICAgICAgICBsb2FkZXIuZGF0YVxuICAgICAgICBdKVxuICAgIH0sXG4gICAgbm9kZTogY29uZmlndXJhdGlvbi5ub2RlRW52aXJvbm1lbnQsXG4gICAgcGx1Z2luczogcGx1Z2luSW5zdGFuY2VzXG59XG5pZiAoXG4gICAgIUFycmF5LmlzQXJyYXkoY29uZmlndXJhdGlvbi5tb2R1bGUuc2tpcFBhcnNlUmVndWxhckV4cHJlc3Npb25zKSB8fFxuICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnNraXBQYXJzZVJlZ3VsYXJFeHByZXNzaW9ucy5sZW5ndGhcbilcbiAgICB3ZWJwYWNrQ29uZmlndXJhdGlvbi5tb2R1bGUubm9QYXJzZSA9XG4gICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnNraXBQYXJzZVJlZ3VsYXJFeHByZXNzaW9uc1xuaWYgKGNvbmZpZ3VyYXRpb24uc2hvd0NvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zb2xlLmluZm8oJ1VzaW5nIGludGVybmFsIGNvbmZpZ3VyYXRpb246JywgdXRpbC5pbnNwZWN0KGNvbmZpZ3VyYXRpb24sIHtcbiAgICAgICAgZGVwdGg6IG51bGx9KSlcbiAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcbiAgICBjb25zb2xlLmluZm8oJ1VzaW5nIHdlYnBhY2sgY29uZmlndXJhdGlvbjonLCB1dGlsLmluc3BlY3QoXG4gICAgICAgIHdlYnBhY2tDb25maWd1cmF0aW9uLCB7ZGVwdGg6IG51bGx9KSlcbn1cbi8vIGVuZHJlZ2lvblxuZXhwb3J0IGRlZmF1bHQgd2VicGFja0NvbmZpZ3VyYXRpb25cbi8vIHJlZ2lvbiB2aW0gbW9kbGluZVxuLy8gdmltOiBzZXQgdGFic3RvcD00IHNoaWZ0d2lkdGg9NCBleHBhbmR0YWI6XG4vLyB2aW06IGZvbGRtZXRob2Q9bWFya2VyIGZvbGRtYXJrZXI9cmVnaW9uLGVuZHJlZ2lvbjpcbi8vIGVuZHJlZ2lvblxuIl19