#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _clientnode = require('clientnode');

var _clientnode2 = _interopRequireDefault(_clientnode);

var _jsdom = require('jsdom');

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// endregion
// region methods
/**
 * Provides a class of static methods with generic use cases.
 */
class Helper {
    // region boolean
    /**
     * Determines whether given file path is within given list of file
     * locations.
     * @param filePath - Path to file to check.
     * @param locationsToCheck - Locations to take into account.
     * @returns Value "true" if given file path is within one of given
     * locations or "false" otherwise.
     */
    static isFilePathInLocation(filePath, locationsToCheck) {
        for (const pathToCheck of locationsToCheck) if (_path2.default.resolve(filePath).startsWith(_path2.default.resolve(pathToCheck))) return true;
        return false;
    }
    // endregion
    // region string
    /**
     * In places each matching cascading style sheet or javaScript file
     * reference.
     * @param content - Markup content to process.
     * @param cascadingStyleSheetPattern - Pattern to match cascading style
     * sheet asset references again.
     * @param javaScriptPattern - Pattern to match javaScript asset references
     * again.
     * @param basePath - Base path to use as prefix for file references.
     * @param cascadingStyleSheetChunkNameTemplate - Cascading style sheet
     * chunk name template to use for asset matching.
     * @param javaScriptChunkNameTemplate - JavaScript chunk name template to
     * use for asset matching.
     * @param assets - Mapping of asset file paths to their content.
     * @returns Given an transformed markup.
     */
    static inPlaceCSSAndJavaScriptAssetReferences(content, cascadingStyleSheetPattern, javaScriptPattern, basePath, cascadingStyleSheetChunkNameTemplate, javaScriptChunkNameTemplate, assets) {
        /*
            NOTE: We have to translate template delimiter to html compatible
            sequences and translate it back later to avoid unexpected escape
            sequences in resulting html.
        */
        return new _promise2.default((resolve, reject) => {
            let window;
            try {
                window = new _jsdom.JSDOM(content.replace(/<%/g, '##+#+#+##').replace(/%>/g, '##-#-#-##')).window;
            } catch (error) {
                return reject(error);
            }
            const filePathsToRemove = [];
            if (cascadingStyleSheetPattern) for (const pattern in cascadingStyleSheetPattern) {
                if (!cascadingStyleSheetPattern.hasOwnProperty(pattern)) continue;
                let selector = '[href*=".css"]';
                if (pattern !== '*') selector = '[href="' + _path2.default.relative(basePath, Helper.renderFilePathTemplate(cascadingStyleSheetChunkNameTemplate, {
                    '[contenthash]': '',
                    '[id]': pattern,
                    '[name]': pattern
                })) + '"]';
                const domNodes = window.document.querySelectorAll(`link${selector}`);
                if (domNodes.length) for (const domNode of domNodes) {
                    const inPlaceDomNode = window.document.createElement('style');
                    const path = domNode.attributes.href.value.replace(/&.*/g, '');
                    if (!assets.hasOwnProperty(path)) continue;
                    inPlaceDomNode.textContent = assets[path].source();
                    if (cascadingStyleSheetPattern[pattern] === 'body') window.document.body.appendChild(inPlaceDomNode);else if (cascadingStyleSheetPattern[pattern] === 'in') domNode.parentNode.insertBefore(inPlaceDomNode, domNode);else if (cascadingStyleSheetPattern[pattern] === 'head') window.document.head.appendChild(inPlaceDomNode);
                    domNode.parentNode.removeChild(domNode);
                    /*
                        NOTE: This doesn't prevent webpack from
                        creating this file if present in another chunk
                        so removing it (and a potential source map
                        file) later in the "done" hook.
                    */
                    filePathsToRemove.push(Helper.stripLoader(path));
                    delete assets[path];
                } else console.warn('No referenced cascading style sheet file in ' + 'resulting markup found with selector: link' + selector);
            }
            if (javaScriptPattern) for (const pattern in javaScriptPattern) {
                if (!javaScriptPattern.hasOwnProperty(pattern)) continue;
                let selector = '[href*=".js"]';
                if (pattern !== '*') selector = '[src^="' + _path2.default.relative(basePath, Helper.renderFilePathTemplate(javaScriptChunkNameTemplate, {
                    '[hash]': '',
                    '[id]': pattern,
                    '[name]': pattern
                }) + '"]');
                const domNodes = window.document.querySelectorAll(`script${selector}`);
                if (domNodes.length) for (const domNode of domNodes) {
                    const inPlaceDomNode = window.document.createElement('script');
                    const path = domNode.attributes.src.value.replace(/&.*/g, '');
                    if (!assets.hasOwnProperty(path)) continue;
                    inPlaceDomNode.textContent = assets[path].source();
                    if (javaScriptPattern[pattern] === 'body') window.document.body.appendChild(inPlaceDomNode);else if (javaScriptPattern[pattern] === 'in') domNode.parentNode.insertBefore(inPlaceDomNode, domNode);else if (javaScriptPattern[pattern] === 'head') window.document.head.appendChild(inPlaceDomNode);
                    domNode.parentNode.removeChild(domNode);
                    /*
                        NOTE: This doesn't prevent webpack from
                        creating this file if present in another chunk
                        so removing it (and a potential source map
                        file) later in the "done" hook.
                    */
                    filePathsToRemove.push(Helper.stripLoader(path));
                    delete assets[path];
                } else console.warn('No referenced javaScript file in resulting ' + `markup found with selector: script${selector}`);
            }
            resolve({
                content: content.replace(/^(\s*<!doctype [^>]+?>\s*)[\s\S]*$/i, '$1') + window.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g, '<%').replace(/##-#-#-##/g, '%>'),
                filePathsToRemove
            });
        });
    }
    /**
     * Strips loader informations form given module request including loader
     * prefix and query parameter.
     * @param moduleID - Module request to strip.
     * @returns Given module id stripped.
     */
    static stripLoader(moduleID) {
        moduleID = moduleID.toString();
        const moduleIDWithoutLoader = moduleID.substring(moduleID.lastIndexOf('!') + 1);
        return moduleIDWithoutLoader.includes('?') ? moduleIDWithoutLoader.substring(0, moduleIDWithoutLoader.indexOf('?')) : moduleIDWithoutLoader;
    }
    // endregion
    // region array
    /**
     * Converts given list of path to a normalized list with unique values.
     * @param paths - File paths.
     * @returns The given file path list with normalized unique values.
     */
    static normalizePaths(paths) {
        return (0, _from2.default)(new _set2.default(paths.map(givenPath => {
            givenPath = _path2.default.normalize(givenPath);
            if (givenPath.endsWith('/')) return givenPath.substring(0, givenPath.length - 1);
            return givenPath;
        })));
    }
    // endregion
    // region file handler
    /**
     * Applies file path/name placeholder replacements with given bundle
     * associated informations.
     * @param filePathTemplate - File path to process placeholder in.
     * @param informations - Scope to use for processing.
     * @returns Processed file path.
     */
    static renderFilePathTemplate(filePathTemplate, informations = {
        '[name]': '.__dummy__', '[id]': '.__dummy__',
        '[hash]': '.__dummy__'
    }) {
        let filePath = filePathTemplate;
        for (const placeholderName in informations) if (informations.hasOwnProperty(placeholderName)) filePath = filePath.replace(new RegExp(_clientnode2.default.stringEscapeRegularExpressions(placeholderName), 'g'), informations[placeholderName]);
        return filePath;
    }
    /**
     * Converts given request to a resolved request with given context
     * embedded.
     * @param request - Request to determine.
     * @param context - Context of given request to resolve relative to.
     * @param referencePath - Path to resolve local modules relative to.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of replacements to take into
     * account.
     * @param relativeModuleFilePaths - List of relative file path to search
     * for modules in.
     * @returns A new resolved request.
     */
    static applyContext(request, context = './', referencePath = './', aliases = {}, moduleReplacements = {}, relativeModuleFilePaths = ['node_modules']) {
        referencePath = _path2.default.resolve(referencePath);
        if (request.startsWith('./') && _path2.default.resolve(context) !== referencePath) {
            request = _path2.default.resolve(context, request);
            for (const modulePath of relativeModuleFilePaths) {
                const pathPrefix = _path2.default.resolve(referencePath, modulePath);
                if (request.startsWith(pathPrefix)) {
                    request = request.substring(pathPrefix.length);
                    if (request.startsWith('/')) request = request.substring(1);
                    return Helper.applyModuleReplacements(Helper.applyAliases(request.substring(request.lastIndexOf('!') + 1), aliases), moduleReplacements);
                }
            }
            if (request.startsWith(referencePath)) {
                request = request.substring(referencePath.length);
                if (request.startsWith('/')) request = request.substring(1);
                return Helper.applyModuleReplacements(Helper.applyAliases(request.substring(request.lastIndexOf('!') + 1), aliases), moduleReplacements);
            }
        }
        return request;
    }
    /**
     * Check if given request points to an external dependency not maintained
     * by current package context.
     * @param request - Request to determine.
     * @param context - Context of current project.
     * @param requestContext - Context of given request to resolve relative to.
     * @param normalizedInternalInjection - Mapping of chunk names to modules
     * which should be injected.
     * @param externalModuleLocations - Array if paths where external modules
     * take place.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of replacements to take into
     * account.
     * @param extensions - List of file and module extensions to take into
     * account.
     * @param referencePath - Path to resolve local modules relative to.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @param relativeModuleFilePaths - List of relative file path to search
     * for modules in.
     * @param packageEntryFileNames - List of package entry file names to
     * search for. The magic name "__package__" will search for an appreciate
     * entry in a "package.json" file.
     * @param packageMainPropertyNames - List of package file main property
     * names to search for package representing entry module definitions.
     * @param packageAliasPropertyNames - List of package file alias property
     * names to search for package specific module aliases.
     * @param includePattern - Array of regular expressions to explicitly mark
     * as external dependency.
     * @param excludePattern - Array of regular expressions to explicitly mark
     * as internal dependency.
     * @param inPlaceNormalLibrary - Indicates whether normal libraries should
     * be external or not.
     * @param inPlaceDynamicLibrary - Indicates whether requests with
     * integrated loader configurations should be marked as external or not.
     * @param encoding - Encoding for file names to use during file traversing.
     * @returns A new resolved request indicating whether given request is an
     * external one.
     */
    static determineExternalRequest(request, context = './', requestContext = './', normalizedInternalInjection = {}, externalModuleLocations = ['node_modules'], aliases = {}, moduleReplacements = {}, extensions = {
        file: {
            external: ['.js'],
            internal: ['.js', '.json', '.css', '.eot', '.gif', '.html', '.ico', '.jpg', '.png', '.ejs', '.svg', '.ttf', '.woff', '.woff2']
        }, module: []
    }, referencePath = './', pathsToIgnore = ['.git'], relativeModuleFilePaths = ['node_modules'], packageEntryFileNames = ['index', 'main'], packageMainPropertyNames = ['main', 'module'], packageAliasPropertyNames = [], includePattern = [], excludePattern = [], inPlaceNormalLibrary = false, inPlaceDynamicLibrary = true, encoding = 'utf-8') {
        context = _path2.default.resolve(context);
        requestContext = _path2.default.resolve(requestContext);
        referencePath = _path2.default.resolve(referencePath);
        // NOTE: We apply alias on externals additionally.
        let resolvedRequest = Helper.applyModuleReplacements(Helper.applyAliases(request.substring(request.lastIndexOf('!') + 1), aliases), moduleReplacements);
        /*
            NOTE: Aliases and module replacements doesn't have to be forwarded
            since we pass an already resolved request.
        */
        let filePath = Helper.determineModuleFilePath(resolvedRequest, {}, {}, extensions, context, requestContext, pathsToIgnore, relativeModuleFilePaths, packageEntryFileNames, packageMainPropertyNames, packageAliasPropertyNames, encoding);
        /*
            NOTE: We mark dependencies as external if there file couldn't be
            resolved or are specified to be external explicitly.
        */
        if (!(filePath || inPlaceNormalLibrary) || _clientnode2.default.isAnyMatching(resolvedRequest, includePattern)) return Helper.applyContext(resolvedRequest, requestContext, referencePath, aliases, moduleReplacements, relativeModuleFilePaths);
        if (_clientnode2.default.isAnyMatching(resolvedRequest, excludePattern)) return null;
        for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) for (const moduleID of normalizedInternalInjection[chunkName]) if (Helper.determineModuleFilePath(moduleID, aliases, moduleReplacements, extensions, context, requestContext, pathsToIgnore, relativeModuleFilePaths, packageEntryFileNames, packageMainPropertyNames, packageAliasPropertyNames, encoding) === filePath) return null;
        /*
            NOTE: We mark dependencies as external if they does not contain a
            loader in their request and aren't part of the current main package
            or have a file extension other than javaScript aware.
        */
        if (!inPlaceNormalLibrary && (extensions.file.external.length === 0 || filePath && extensions.file.external.includes(_path2.default.extname(filePath)) || !filePath && extensions.file.external.includes('')) && !(inPlaceDynamicLibrary && request.includes('!')) && (!filePath && inPlaceDynamicLibrary || filePath && (!filePath.startsWith(context) || Helper.isFilePathInLocation(filePath, externalModuleLocations)))) return Helper.applyContext(resolvedRequest, requestContext, referencePath, aliases, moduleReplacements, relativeModuleFilePaths);
        return null;
    }
    /**
     * Determines asset type of given file.
     * @param filePath - Path to file to analyse.
     * @param buildConfiguration - Meta informations for available asset
     * types.
     * @param paths - List of paths to search if given path doesn't reference
     * a file directly.
     * @returns Determined file type or "null" of given file couldn't be
     * determined.
     */
    static determineAssetType(filePath, buildConfiguration, paths) {
        let result = null;
        for (const type in buildConfiguration) if (_path2.default.extname(filePath) === `.${buildConfiguration[type].extension}`) {
            result = type;
            break;
        }
        if (!result) for (const type of ['source', 'target']) for (const assetType in paths[type].asset) if (paths[type].asset.hasOwnProperty(assetType) && assetType !== 'base' && paths[type].asset[assetType] && filePath.startsWith(paths[type].asset[assetType])) return assetType;
        return result;
    }
    /**
     * Adds a property with a stored array of all matching file paths, which
     * matches each build configuration in given entry path and converts given
     * build configuration into a sorted array were javaScript files takes
     * precedence.
     * @param configuration - Given build configurations.
     * @param entryPath - Path to analyse nested structure.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @param mainFileBasenames - File basenames to sort into the front.
     * @returns Converted build configuration.
     */
    static resolveBuildConfigurationFilePaths(configuration, entryPath = './', pathsToIgnore = ['.git'], mainFileBasenames = ['index', 'main']) {
        const buildConfiguration = [];
        for (const type in configuration) if (configuration.hasOwnProperty(type)) {
            const newItem = _clientnode2.default.extendObject(true, { filePaths: [] }, configuration[type]);
            for (const file of _clientnode2.default.walkDirectoryRecursivelySync(entryPath, file => {
                if (Helper.isFilePathInLocation(file.path, pathsToIgnore)) return false;
            })) if (file.stat.isFile() && _path2.default.extname(file.path).substring(1) === newItem.extension && !new RegExp(newItem.filePathPattern).test(file.path)) newItem.filePaths.push(file.path);
            newItem.filePaths.sort((firstFilePath, secondFilePath) => {
                if (mainFileBasenames.includes(_path2.default.basename(firstFilePath, _path2.default.extname(firstFilePath)))) {
                    if (mainFileBasenames.includes(_path2.default.basename(secondFilePath, _path2.default.extname(secondFilePath)))) return 0;
                } else if (mainFileBasenames.includes(_path2.default.basename(secondFilePath, _path2.default.extname(secondFilePath)))) return 1;
                return 0;
            });
            buildConfiguration.push(newItem);
        }
        return buildConfiguration.sort((first, second) => {
            if (first.outputExtension !== second.outputExtension) {
                if (first.outputExtension === 'js') return -1;
                if (second.outputExtension === 'js') return 1;
                return first.outputExtension < second.outputExtension ? -1 : 1;
            }
            return 0;
        });
    }
    /**
     * Determines all file and directory paths related to given internal
     * modules as array.
     * @param internalInjection - List of module ids or module file paths.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of module replacements to take into
     * account.
     * @param extensions - List of file and module extensions to take into
     * account.
     * @param context - File path to resolve relative to.
     * @param referencePath - Path to search for local modules.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @param relativeModuleFilePaths - List of relative file path to search
     * for modules in.
     * @param packageEntryFileNames - List of package entry file names to
     * search for. The magic name "__package__" will search for an appreciate
     * entry in a "package.json" file.
     * @param packageMainPropertyNames - List of package file main property
     * names to search for package representing entry module definitions.
     * @param packageAliasPropertyNames - List of package file alias property
     * names to search for package specific module aliases.
     * @param encoding - File name encoding to use during file traversing.
     * @returns Object with a file path and directory path key mapping to
     * corresponding list of paths.
     */
    static determineModuleLocations(internalInjection, aliases = {}, moduleReplacements = {}, extensions = {
        file: {
            external: ['.js'],
            internal: ['.js', '.json', '.css', '.eot', '.gif', '.html', '.ico', '.jpg', '.png', '.ejs', '.svg', '.ttf', '.woff', '.woff2']
        }, module: []
    }, context = './', referencePath = '', pathsToIgnore = ['.git'], relativeModuleFilePaths = ['', 'node_modules', '../'], packageEntryFileNames = ['__package__', '', 'index', 'main'], packageMainPropertyNames = ['main', 'module'], packageAliasPropertyNames = [], encoding = 'utf-8') {
        const filePaths = [];
        const directoryPaths = [];
        const normalizedInternalInjection = Helper.resolveModulesInFolders(Helper.normalizeInternalInjection(internalInjection), aliases, moduleReplacements, context, referencePath, pathsToIgnore);
        for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) for (const moduleID of normalizedInternalInjection[chunkName]) {
            const filePath = Helper.determineModuleFilePath(moduleID, aliases, moduleReplacements, extensions, context, referencePath, pathsToIgnore, relativeModuleFilePaths, packageEntryFileNames, packageMainPropertyNames, packageAliasPropertyNames, encoding);
            if (filePath) {
                filePaths.push(filePath);
                const directoryPath = _path2.default.dirname(filePath);
                if (!directoryPaths.includes(directoryPath)) directoryPaths.push(directoryPath);
            }
        }
        return { filePaths, directoryPaths };
    }
    /**
     * Determines a list of concrete file paths for given module id pointing to
     * a folder which isn't a package.
     * @param normalizedInternalInjection - Injection data structure of
     * modules with folder references to resolve.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of replacements to take into
     * account.
     * @param context - File path to determine relative to.
     * @param referencePath - Path to resolve local modules relative to.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @returns Given injections with resolved folder pointing modules.
     */
    static resolveModulesInFolders(normalizedInternalInjection, aliases = {}, moduleReplacements = {}, context = './', referencePath = '', pathsToIgnore = ['.git']) {
        if (referencePath.startsWith('/')) referencePath = _path2.default.relative(context, referencePath);
        for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) {
            let index = 0;
            for (let moduleID of normalizedInternalInjection[chunkName]) {
                moduleID = Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(moduleID), aliases), moduleReplacements);
                const resolvedPath = _path2.default.resolve(referencePath, moduleID);
                if (_clientnode2.default.isDirectorySync(resolvedPath)) {
                    normalizedInternalInjection[chunkName].splice(index, 1);
                    for (const file of _clientnode2.default.walkDirectoryRecursivelySync(resolvedPath, file => {
                        if (Helper.isFilePathInLocation(file.path, pathsToIgnore)) return false;
                    })) if (file.stat.isFile()) normalizedInternalInjection[chunkName].push('./' + _path2.default.relative(referencePath, _path2.default.resolve(resolvedPath, file.path)));
                } else if (moduleID.startsWith('./') && !moduleID.startsWith('./' + _path2.default.relative(context, referencePath))) normalizedInternalInjection[chunkName][index] = `./${_path2.default.relative(context, resolvedPath)}`;
                index += 1;
            }
        }
        return normalizedInternalInjection;
    }
    /**
     * Every injection definition type can be represented as plain object
     * (mapping from chunk name to array of module ids). This method converts
     * each representation into the normalized plain object notation.
     * @param internalInjection - Given internal injection to normalize.
     * @returns Normalized representation of given internal injection.
     */
    static normalizeInternalInjection(internalInjection) {
        let result = {};
        if (internalInjection instanceof Object && _clientnode2.default.isPlainObject(internalInjection)) {
            let hasContent = false;
            const chunkNamesToDelete = [];
            for (const chunkName in internalInjection) if (internalInjection.hasOwnProperty(chunkName)) if (Array.isArray(internalInjection[chunkName])) {
                if (internalInjection[chunkName].length > 0) {
                    hasContent = true;
                    result[chunkName] = internalInjection[chunkName];
                } else chunkNamesToDelete.push(chunkName);
            } else {
                hasContent = true;
                result[chunkName] = [internalInjection[chunkName]];
            }
            if (hasContent) for (const chunkName of chunkNamesToDelete) delete result[chunkName];else result = { index: [] };
        } else if (typeof internalInjection === 'string') result = { index: [internalInjection] };else if (Array.isArray(internalInjection)) result = { index: internalInjection };
        return result;
    }
    /**
     * Determines all concrete file paths for given injection which are marked
     * with the "__auto__" indicator.
     * @param givenInjection - Given internal and external injection to take
     * into account.
     * @param buildConfigurations - Resolved build configuration.
     * @param modulesToExclude - A list of modules to exclude (specified by
     * path or id) or a mapping from chunk names to module ids.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of replacements to take into
     * account.
     * @param extensions - List of file and module extensions to take into
     * account.
     * @param context - File path to use as starting point.
     * @param referencePath - Reference path from where local files should be
     * resolved.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @returns Given injection with resolved marked indicators.
     */
    static resolveInjection(givenInjection, buildConfigurations, modulesToExclude, aliases = {}, moduleReplacements = {}, extensions = {
        file: {
            external: ['.js'],
            internal: ['.js', '.json', '.css', '.eot', '.gif', '.html', '.ico', '.jpg', '.png', '.ejs', '.svg', '.ttf', '.woff', '.woff2']
        }, module: []
    }, context = './', referencePath = '', pathsToIgnore = ['.git']) {
        const injection = _clientnode2.default.extendObject(true, {}, givenInjection);
        const moduleFilePathsToExclude = Helper.determineModuleLocations(modulesToExclude, aliases, moduleReplacements, extensions, context, referencePath, pathsToIgnore).filePaths;
        for (const type of ['internal', 'external'])
        /* eslint-disable curly */
        if (typeof injection[type] === 'object') {
            for (const chunkName in injection[type]) if (injection[type][chunkName] === '__auto__') {
                injection[type][chunkName] = [];
                const modules = Helper.getAutoChunk(buildConfigurations, moduleFilePathsToExclude, referencePath);
                for (const subChunkName in modules) if (modules.hasOwnProperty(subChunkName)) injection[type][chunkName].push(modules[subChunkName]);
                /*
                    Reverse array to let javaScript and main files be
                    the last ones to export them rather.
                */
                injection[type][chunkName].reverse();
            }
        } else if (injection[type] === '__auto__')
            /* eslint-enable curly */
            injection[type] = Helper.getAutoChunk(buildConfigurations, moduleFilePathsToExclude, context);
        return injection;
    }
    /**
     * Determines all module file paths.
     * @param buildConfigurations - Resolved build configuration.
     * @param moduleFilePathsToExclude - A list of modules file paths to
     * exclude (specified by path or id) or a mapping from chunk names to
     * module ids.
     * @param context - File path to use as starting point.
     * @returns All determined module file paths.
     */
    static getAutoChunk(buildConfigurations, moduleFilePathsToExclude, context) {
        const result = {};
        const injectedModuleIDs = {};
        for (const buildConfiguration of buildConfigurations) {
            if (!injectedModuleIDs[buildConfiguration.outputExtension]) injectedModuleIDs[buildConfiguration.outputExtension] = [];
            for (const moduleFilePath of buildConfiguration.filePaths) if (!moduleFilePathsToExclude.includes(moduleFilePath)) {
                const relativeModuleFilePath = './' + _path2.default.relative(context, moduleFilePath);
                const directoryPath = _path2.default.dirname(relativeModuleFilePath);
                const baseName = _path2.default.basename(relativeModuleFilePath, `.${buildConfiguration.extension}`);
                let moduleID = baseName;
                if (directoryPath !== '.') moduleID = _path2.default.join(directoryPath, baseName);
                /*
                    Ensure that each output type has only one source
                    representation.
                */
                if (!injectedModuleIDs[buildConfiguration.outputExtension].includes(moduleID)) {
                    /*
                        Ensure that same module ids and different output
                        types can be distinguished by their extension
                        (JavaScript-Modules remains without extension since
                        they will be handled first because the build
                        configurations are expected to be sorted in this
                        context).
                    */
                    if (result.hasOwnProperty(moduleID)) result[relativeModuleFilePath] = relativeModuleFilePath;else result[moduleID] = relativeModuleFilePath;
                    injectedModuleIDs[buildConfiguration.outputExtension].push(moduleID);
                }
            }
        }
        return result;
    }
    /**
     * Determines a concrete file path for given module id.
     * @param moduleID - Module id to determine.
     * @param aliases - Mapping of aliases to take into account.
     * @param moduleReplacements - Mapping of replacements to take into
     * account.
     * @param extensions - List of file and module extensions to take into
     * account.
     * @param context - File path to determine relative to.
     * @param referencePath - Path to resolve local modules relative to.
     * @param pathsToIgnore - Paths which marks location to ignore.
     * @param relativeModuleFilePaths - List of relative file path to search
     * for modules in.
     * @param packageEntryFileNames - List of package entry file names to
     * search for. The magic name "__package__" will search for an appreciate
     * entry in a "package.json" file.
     * @param packageMainPropertyNames - List of package file main property
     * names to search for package representing entry module definitions.
     * @param packageAliasPropertyNames - List of package file alias property
     * names to search for package specific module aliases.
     * @param encoding - Encoding to use for file names during file traversing.
     * @returns File path or given module id if determinations has failed or
     * wasn't necessary.
     */
    static determineModuleFilePath(moduleID, aliases = {}, moduleReplacements = {}, extensions = {
        file: {
            external: ['.js'],
            internal: ['.js', '.json', '.css', '.eot', '.gif', '.html', '.ico', '.jpg', '.png', '.ejs', '.svg', '.ttf', '.woff', '.woff2']
        }, module: []
    }, context = './', referencePath = '', pathsToIgnore = ['.git'], relativeModuleFilePaths = ['node_modules'], packageEntryFileNames = ['index'], packageMainPropertyNames = ['main'], packageAliasPropertyNames = [], encoding = 'utf-8') {
        moduleID = Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(moduleID), aliases), moduleReplacements);
        if (!moduleID) return null;
        let moduleFilePath = moduleID;
        if (moduleFilePath.startsWith('./')) moduleFilePath = _path2.default.join(referencePath, moduleFilePath);
        for (const moduleLocation of [referencePath].concat(relativeModuleFilePaths.map(filePath => _path2.default.resolve(context, filePath)))) for (let fileName of ['', '__package__'].concat(packageEntryFileNames)) for (const moduleExtension of extensions.module.concat([''])) for (const fileExtension of [''].concat(extensions.file.internal)) {
            let currentModuleFilePath;
            if (moduleFilePath.startsWith('/')) currentModuleFilePath = _path2.default.resolve(moduleFilePath);else currentModuleFilePath = _path2.default.resolve(moduleLocation, moduleFilePath);
            let packageAliases = {};
            if (fileName === '__package__') {
                if (_clientnode2.default.isDirectorySync(currentModuleFilePath)) {
                    const pathToPackageJSON = _path2.default.resolve(currentModuleFilePath, 'package.json');
                    if (_clientnode2.default.isFileSync(pathToPackageJSON)) {
                        let localConfiguration = {};
                        try {
                            localConfiguration = JSON.parse(fileSystem.readFileSync(pathToPackageJSON, { encoding }));
                        } catch (error) {}
                        for (const propertyName of packageMainPropertyNames) if (localConfiguration.hasOwnProperty(propertyName) && typeof localConfiguration[propertyName] === 'string' && localConfiguration[propertyName]) {
                            fileName = localConfiguration[propertyName];
                            break;
                        }
                        for (const propertyName of packageAliasPropertyNames) if (localConfiguration.hasOwnProperty(propertyName) && typeof localConfiguration[propertyName] === 'object') {
                            packageAliases = localConfiguration[propertyName];
                            break;
                        }
                    }
                }
                if (fileName === '__package__') continue;
            }
            fileName = Helper.applyModuleReplacements(Helper.applyAliases(fileName, packageAliases), moduleReplacements);
            if (fileName) currentModuleFilePath = _path2.default.resolve(currentModuleFilePath, `${fileName}${moduleExtension}${fileExtension}`);else currentModuleFilePath += `${fileName}${moduleExtension}${fileExtension}`;
            if (Helper.isFilePathInLocation(currentModuleFilePath, pathsToIgnore)) continue;
            if (_clientnode2.default.isFileSync(currentModuleFilePath)) return currentModuleFilePath;
        }
        return null;
    }
    // endregion
    /**
     * Determines a concrete file path for given module id.
     * @param moduleID - Module id to determine.
     * @param aliases - Mapping of aliases to take into account.
     * @returns The alias applied given module id.
     */
    static applyAliases(moduleID, aliases) {
        for (const alias in aliases) if (alias.endsWith('$')) {
            if (moduleID === alias.substring(0, alias.length - 1)) moduleID = aliases[alias];
        } else moduleID = moduleID.replace(alias, aliases[alias]);
        return moduleID;
    }
    /**
     * Determines a concrete file path for given module id.
     * @param moduleID - Module id to determine.
     * @param replacements - Mapping of regular expressions to their
     * corresponding replacements.
     * @returns The replacement applied given module id.
     */
    static applyModuleReplacements(moduleID, replacements) {
        for (const replacement in replacements) if (replacements.hasOwnProperty(replacement)) moduleID = moduleID.replace(new RegExp(replacement), replacements[replacement]);
        return moduleID;
    }
}
exports.default = Helper; // endregion
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;charset=utf-8;base64,